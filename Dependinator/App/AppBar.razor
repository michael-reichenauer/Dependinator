@inject ICanvasService srv
@inject IApplicationEvents applicationEvents
@inject Dependinator.Models.IModelService modelService

<MudAppBar Dense="true" Elevation="5">
    <MudMenu Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Dense="true" Class="ml-n3 mr-5"
        AnchorOrigin="Origin.BottomCenter">

        <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.FitScreen" OnClick="srv.PanZoomToFit">
            Fit
            to
            Screen</MudMenuItem>

        <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.OpenInBrowser" OnClick="srv.OpenFiles">
            Browse
            Files ...</MudMenuItem>

        <MudDivider />

        <MudMenuItem IconColor="Color.Error" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@OnRemove">Remove
            Model</MudMenuItem>

        <MudDivider />

        @{
            foreach (var path in RecentModelPaths)
            {
                <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Schema"
                    OnClick="() => srv.LoadAsync(path)">
                    @Path.GetFileNameWithoutExtension(path)
                </MudMenuItem>
            }
        }

    </MudMenu>

    <MudIconButton Icon="@Icons.Material.Outlined.Undo" Color="Color.Inherit" Disabled="@(!modelService.CanUndo)"
        OnClick="modelService.Undo" />

    <MudIconButton Icon="@Icons.Material.Outlined.Redo" Color="Color.Inherit" Disabled="@(!modelService.CanRedo)"
        OnClick="modelService.Redo" />

    <MudIconButton Icon="@Icons.Material.Outlined.FitScreen" Color="Color.Inherit" OnClick="srv.PanZoomToFit" />
    @if (!Build.IsWebAssembly)
    {
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="srv.Refresh" />
    }

    <MudText Typo="Typo.h6" Class="ml-6">@DiagramName</MudText>

</MudAppBar>


<MudMessageBox @ref="mbox" Title="Remove Model" CancelText="Cancel">
    <MessageContent>
        Do you want to remove model?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">
            Remove</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    MudMessageBox mbox { get; set; } = null!;
    string TitleInfo => srv.TitleInfo;
    string DiagramName => srv.DiagramName;
    IReadOnlyList<string> RecentModelPaths => srv.RecentModelPaths;

    private async void OnRemove()
    {
        if (await mbox.ShowAsync() != true) return;
        srv.Remove();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}
