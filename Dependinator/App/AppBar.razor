@inject ICanvasService srv
@inject IApplicationEvents applicationEvents
@inject Dependinator.Models.IModelService modelService

<MudAppBar Dense="true" Elevation="5">
    <AppMenu />
    <MudIconButton Icon="@Icons.Material.Outlined.Undo" Color="Color.Inherit" Disabled="@(!modelService.CanUndo)"
        OnClick="modelService.Undo" />

    <MudIconButton Icon="@Icons.Material.Outlined.Redo" Color="Color.Inherit" Disabled="@(!modelService.CanRedo)"
        OnClick="modelService.Redo" />

    <MudIconButton Icon="@Icons.Material.Outlined.FitScreen" Color="Color.Inherit" OnClick="srv.PanZoomToFit" />
    @if (!Build.IsWebAssembly)
    {
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="srv.Refresh" />
    }

    <MudText Typo="Typo.h6" Class="ml-2">@DiagramName</MudText>

</MudAppBar>


@code {
    string TitleInfo => srv.TitleInfo;
    string DiagramName => srv.DiagramName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}
