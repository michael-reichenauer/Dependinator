@inject ICanvasService srv
@inject Dependinator.Models.IModelService modelService
@inject IApplicationEvents applicationEvents
@implements IDisposable

<MudMenu Icon="@Icons.Material.Outlined.Menu" IconColor="Color.Secondary" Dense="true" Class="@MenuClass"
    AnchorOrigin="Origin.BottomCenter">

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Undo" Disabled="@(!modelService.CanUndo)"
        OnClick="modelService.Undo">
        Undo
    </MudMenuItem>

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Redo" Disabled="@(!modelService.CanRedo)"
        OnClick="modelService.Redo">
        Redo
    </MudMenuItem>

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.FitScreen" OnClick="srv.PanZoomToFit">
        Fit to Screen
    </MudMenuItem>

    @if (!Build.IsWebAssembly)
    {
        <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Refresh" OnClick="srv.Refresh">
            Refresh
        </MudMenuItem>
    }

    <MudDivider />

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.OpenInBrowser" OnClick="srv.OpenFiles">
        Browse Files ...
    </MudMenuItem>

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.OpenInBrowser" OnClick="srv.ToggleTheme">
        Toggle Dark/Light Theme
    </MudMenuItem>

    <MudDivider />

    <MudMenuItem IconColor="Color.Error" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@OnRemove">
        Remove Model
    </MudMenuItem>

    <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Info" OnClick="@ShowAbout">
        About
    </MudMenuItem>

    <MudDivider />

    @foreach (var path in RecentModelPaths)
    {
        <MudMenuItem IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.Schema" OnClick="() => srv.LoadAsync(path)">
            @Path.GetFileNameWithoutExtension(path)
        </MudMenuItem>
    }

</MudMenu>

<MudMessageBox @ref="mbox" Title="Remove Model" CancelText="Cancel">
    <MessageContent>
        Do you want to remove model?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">
            Remove
        </MudButton>
    </YesButton>
</MudMessageBox>

<MudMessageBox @ref="aboutBox" Title="About Dependinator" YesText="Close">
    <MessageContent>
        <MudText Typo="Typo.body1">Version: @Build.Version</MudText>
        <MudText Typo="Typo.body1">Commit: @Build.CommitSid</MudText>
        <MudText Typo="Typo.body1">Build Time: @Build.Time</MudText>
    </MessageContent>
</MudMessageBox>

@code {
    private Action? uiStateChangedHandler;
    private MudMessageBox mbox { get; set; } = null!;
    private MudMessageBox aboutBox { get; set; } = null!;

    private IReadOnlyList<string> RecentModelPaths => srv.RecentModelPaths;

    [Parameter]
    public string MenuClass { get; set; } = "ml-n3";

    private async void OnRemove()
    {
        if (await mbox.ShowAsync() != true)
        {
            return;
        }

        srv.Remove();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        uiStateChangedHandler = () => InvokeAsync(StateHasChanged);
        applicationEvents.UIStateChanged += uiStateChangedHandler;
    }

    public void Dispose()
    {
        if (uiStateChangedHandler is null)
        {
            return;
        }

        applicationEvents.UIStateChanged -= uiStateChangedHandler;
    }

    private async Task ShowAbout()
    {
        await aboutBox.ShowAsync();
    }
}
