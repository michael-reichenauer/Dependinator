<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dependinator</name>
    </assembly>
    <members>
        <member name="T:Dependinator.Common.MessageDialogs.MessageDialog">
            <summary>
            Interaction logic for MessageDialog.xaml
            </summary>
            <summary>
            MessageDialog
            </summary>
        </member>
        <member name="M:Dependinator.Common.MessageDialogs.MessageDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.Common.ProgressHandling.ProgressDialog">
            <summary>
            Interaction logic for ProgressDialog.xaml
            </summary>
            <summary>
            ProgressDialog
            </summary>
        </member>
        <member name="M:Dependinator.Common.ProgressHandling.ProgressDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.Common.SettingsHandling.ISettingsService">
            <summary>
            Handles program and model settings.
            </summary>
        </member>
        <member name="T:Dependinator.Common.NamespaceDoc">
            <summary>
            Contains common functionality for the application.
            </summary>
        </member>
        <member name="T:Dependinator.Common.WindowControlButtons">
            <summary>
            Interaction logic for WindowControlButtons.xaml
            </summary>
            <summary>
            WindowControlButtons
            </summary>
        </member>
        <member name="M:Dependinator.Common.WindowControlButtons.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.MainWindowViews.NamespaceDoc">
            <summary>
            Contains the main window functionality.
            </summary>
        </member>
        <member name="T:Dependinator.MainWindowViews.SearchFilter">
            <summary>
            Interaction logic for SearchFilter.xaml
            </summary>
            <summary>
            SearchFilter
            </summary>
        </member>
        <member name="M:Dependinator.MainWindowViews.SearchFilter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.MainWindowViews.HamburgerButton">
            <summary>
            Interaction logic for HamburgerButton.xaml.
            </summary>
            <summary>
            HamburgerButton
            </summary>
        </member>
        <member name="M:Dependinator.MainWindowViews.HamburgerButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.MainWindowViews.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:Dependinator.MainWindowViews.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.CodeViewing.CodeDialog">
            <summary>
            Interaction logic for ReferencesDialog.xaml
            </summary>
            <summary>
            CodeDialog
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.CodeViewing.CodeDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.DependencyExploring.Private.DependencyItemView">
            <summary>
            Interaction logic for DependencyItemView.xaml
            </summary>
            <summary>
            DependencyItemView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.DependencyExploring.Private.DependencyItemView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.DependencyExploring.DependencyExplorerWindow">
            <summary>
            Interaction logic for DependencyExplorerWindow.xaml
            </summary>
            <summary>
            DependencyExplorerWindow
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.DependencyExploring.DependencyExplorerWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.AssemblyFileParsing.Private.LinkHandler.IsGenericTypeArgument(Mono.Cecil.MemberReference)">
            <summary>
            Return true if type is a generic type parameter T, as in e.g. Get/T/ (T value)
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.SolutionFileParsing.Project">
            <summary>
            Represents a project within a Solution
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.SolutionFileParsing.Private.ProjectInSolution">
            <summary>
            Wraps the Microsoft.Build.Construction.ProjectInSolution type,
            which is internal type and cannot be used directly. 
            This class uses reflection to access the internal functionality.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.SolutionFileParsing.Private.Reflection">
            <summary>
            Method used to extract information from internal Microsoft classes using reflection
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.SolutionFileParsing.Private.SolutionParser">
            <summary>
            This class parses solution files ".sln" files. It wraps the internal
            Microsoft.Build.Construction.SolutionParser and uses
            reflection to access the internal call and its functionality.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelParsing.Private.SolutionFileParsing.Solution">
            <summary>
            Represents the solution loaded from a sln file.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.Private.ModelPersistence.NamespaceDoc">
            <summary>
            Contains the model persistence to and from file handling.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelHandling.NamespaceDoc">
            <summary>
            Contains the model parsing and persistence handling.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Items.Private.IgnoreMouseWheelBehavior">
            <summary>
            Captures and eats MouseWheel events so that a nested ListBox does not
            prevent an outer scrollable control from scrolling.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Items.ItemsView">
            <summary>
            Interaction logic for ItemsView.xaml
            </summary>
            <summary>
            ItemsView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Items.ItemsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Items.ItemsSource.GetItemIds(System.Windows.Rect)">
            <summary>
            Returns range of item ids, which are visible in the area currently shown
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Items.ItemsSource.GetItem(System.Int32)">
            <summary>
            Returns the item (commit, branch, merge) corresponding to the specified id.
            Commits are in the 0->branchBaseIndex-1 range
            Branches are in the branchBaseIndex->mergeBaseIndex-1 range
            Merges are mergeBaseIndex-> ... range
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Lines.LineView">
            <summary>
            Interaction logic for LineView.xaml
            </summary>
            <summary>
            LineView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Lines.LineView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.DescriptionView">
            <summary>
            Interaction logic for DescriptionView.xaml
            </summary>
            <summary>
            DescriptionView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.DescriptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.NodeControlView">
            <summary>
            Interaction logic for NodeControlView.xaml
            </summary>
            <summary>
            NodeControlView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.NodeControlView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.TitleView">
            <summary>
            Interaction logic for TitleView.xaml
            </summary>
            <summary>
            TitleView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.TitleView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.TypeView">
            <summary>
            Interaction logic for TypeView.xaml
            </summary>
            <summary>
            TypeView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.TypeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.MemberNodeView">
            <summary>
            Interaction logic for MemberNodeView.xaml
            </summary>
            <summary>
            MemberNodeView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.MemberNodeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Nodes.NamespaceView">
            <summary>
            NamespaceView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Nodes.NamespaceView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.NamespaceDoc">
            <summary>
            Contains the model viewing of nodes, lines and links.
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.Open.OpenModelView">
            <summary>
            Interaction logic for OpenModelView.xaml
            </summary>
            <summary>
            OpenModelView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.Open.OpenModelView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.ModelViewing.ModelView">
            <summary>
            Interaction logic for ModelView.xaml
            </summary>
            <summary>
            ModelView
            </summary>
        </member>
        <member name="M:Dependinator.ModelViewing.ModelView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.DebounceDispatcher">
            <summary>
            Provides Debounce() methods.
            Use these methods to ensure that events aren't handled too frequently.
            
            Debounce() fires an event only after the specified interval has passed
            in which no other pending event has fired. Only the last event in the
            sequence is fired.
            Note: https://weblog.west-wind.com/posts/2017/Jul/02/Debouncing-and-Throttling-Dispatcher-Events
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.DebounceDispatcher.Debounce(System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
            <summary>
            Debounce an event by resetting the event timeout every time the event is 
            fired. The behavior is that the Action passed is fired only after events
            stop firing for the given timeout period.
            
            Use Debounce when you want events to fire only after events stop firing
            after the given interval timeout period.
            
            Wrap the logic you would normally use in your event code into
            the  Action you pass to this method to debounce the event.
            Example: https://gist.github.com/RickStrahl/0519b678f3294e27891f4d4f0608519a
            </summary>
            <param name="interval">Timeout in Milliseconds</param>
            <param name="action">Action<object> to fire when debounced event fires</object></param>
            <param name="param">optional parameter</param>
            <param name="priority">optional priorty for the dispatcher</param>
            <param name="disp">optional dispatcher. If not passed or null CurrentDispatcher is used.</param>        
        </member>
        <member name="T:Dependinator.Utils.UI.DelayDispatcher">
            <summary>
            Provides Delay() methods.
            Use these methods to ensure that events aren't handled too frequently.
            
            Delay() fires an event only after the specified interval has passed
            in which no other pending event has fired. Only the last event in the
            sequence is fired.
            Based on: 
            https://weblog.west-wind.com/posts/2017/Jul/02/Debouncing-and-Throttling-Dispatcher-Events
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.DelayDispatcher.Delay(System.TimeSpan,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
            <summary>
            Delay an event by resetting the event timeout every time the event is 
            fired. The behavior is that the Action passed is fired only after events
            stop firing for the given timeout period.
            
            Use Delay when you want events to fire only after events stop firing
            after the given interval timeout period.
            
            Wrap the logic you would normally use in your event code into
            the  Action you pass to this method to debounce the event.
            Example: https://gist.github.com/RickStrahl/0519b678f3294e27891f4d4f0608519a
            </summary>
            <param name="delayTime">Timeout in Milliseconds</param>
            <param name="action">Action<object> to fire when debounced event fires</object></param>
            <param name="param">optional parameter</param>
            <param name="priority">optional priority for the dispatcher</param>
            <param name="dispatcher">optional dispatcher. If not passed or null CurrentDispatcher is used.
            </param>        
        </member>
        <member name="T:Dependinator.Utils.UI.ThrottleDispatcher">
            <summary>
            Provides Throttle() methods.
            Use these methods to ensure that events aren't handled too frequently.
            
            Throttle() ensures that events are throttled by the interval specified.
            Only the last event in the interval sequence of events fires.
            
            Note: https://weblog.west-wind.com/posts/2017/Jul/02/Debouncing-and-Throttling-Dispatcher-Events
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.ThrottleDispatcher.Throttle(System.Int32,System.Action{System.Object},System.Object,System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
            <summary>
            This method throttles events by allowing only 1 event to fire for the given
            timeout period. Only the last event fired is handled - all others are ignored.
            Throttle will fire events every timeout ms even if additional events are pending.
            
            Use Throttle where you need to ensure that events fire at given intervals.
            </summary>
            <param name="interval">Timeout in Milliseconds</param>
            <param name="action">Action<object> to fire when debounced event fires</object></param>
            <param name="param">optional parameter</param>
            <param name="priority">optional priorty for the dispatcher</param>
            <param name="disp">optional dispatcher. If not passed or null CurrentDispatcher is used.</param>
        </member>
        <member name="T:Dependinator.Utils.UI.CredentialsDialog">
            <summary>Encapsulates dialog functionality from the Credential Management API.</summary>
        </member>
        <member name="F:Dependinator.Utils.UI.CredentialsDialog.ValidBannerHeight">
            <summary>The only valid bitmap height (in pixels) of a user-defined banner.</summary>
        </member>
        <member name="F:Dependinator.Utils.UI.CredentialsDialog.ValidBannerWidth">
            <summary>The only valid bitmap width (in pixels) of a user-defined banner.</summary>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dependinator.Utils.UI.CredentialsDialog"/> class
            with the specified target.</summary>
            <param name="target">The name of the target for the credentials, typically a server name.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dependinator.Utils.UI.CredentialsDialog"/> class
            with the specified target and caption.</summary>
            <param name="target">The name of the target for the credentials, typically a server name.</param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Dependinator.Utils.UI.CredentialsDialog"/> class
            with the specified target, caption and message.</summary>
            <param name="target">The name of the target for the credentials, typically a server name.</param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
            <param name="message">The message of the dialog (null will cause a system default message to be used).</param>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.#ctor(System.String,System.String,System.String,System.Drawing.Image)">
            <summary>Initializes a new instance of the <see cref="T:Dependinator.Utils.UI.CredentialsDialog"/> class
            with the specified target, caption, message and banner.</summary>
            <param name="target">The name of the target for the credentials, typically a server name.</param>
            <param name="caption">The caption of the dialog (null will cause a system default title to be used).</param>
            <param name="message">The message of the dialog (null will cause a system default message to be used).</param>
            <param name="banner">The image to display on the dialog (null will cause a system default image to be used).</param>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.AlwaysDisplay">
            <summary>
            Gets or sets if the dialog will be shown even if the credentials
            can be returned from an existing credential in the credential manager.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.ExcludeCertificates">
            <summary>Gets or sets if the dialog is populated with name/password only.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Persist">
            <summary>Gets or sets if the credentials are to be persisted in the credential manager.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.KeepName">
            <summary>Gets or sets if the name is read-only.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Name">
            <summary>Gets or sets the name for the credentials.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Password">
            <summary>Gets or sets the password for the credentials.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.SaveChecked">
            <summary>Gets or sets if the save checkbox status.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.SaveDisplayed">
            <summary>Gets or sets if the save checkbox is displayed.</summary>
            <remarks>This value only has effect if Persist is true.</remarks>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Target">
            <summary>Gets or sets the name of the target for the credentials, typically a server name.</summary>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Caption">
            <summary>Gets or sets the caption of the dialog.</summary>
            <remarks>A null value will cause a system default caption to be used.</remarks>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Message">
            <summary>Gets or sets the message of the dialog.</summary>
            <remarks>A null value will cause a system default message to be used.</remarks>
        </member>
        <member name="P:Dependinator.Utils.UI.CredentialsDialog.Banner">
            <summary>Gets or sets the image to display on the dialog.</summary>
            <remarks>A null value will cause a system default image to be used.</remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show">
            <summary>Shows the credentials dialog.</summary>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.Boolean)">
            <summary>Shows the credentials dialog with the specified save checkbox status.</summary>
            <param name="saveChecked">True if the save checkbox is checked.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.String)">
            <summary>Shows the credentials dialog with the specified name.</summary>
            <param name="name">The name for the credentials.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.String,System.String)">
            <summary>Shows the credentials dialog with the specified name and password.</summary>
            <param name="name">The name for the credentials.</param>
            <param name="password">The password for the credentials.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.String,System.String,System.Boolean)">
            <summary>Shows the credentials dialog with the specified name, password and save checkbox status.</summary>
            <param name="name">The name for the credentials.</param>
            <param name="password">The password for the credentials.</param>
            <param name="saveChecked">True if the save checkbox is checked.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.Windows.Forms.IWin32Window)">
            <summary>Shows the credentials dialog with the specified owner.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>Shows the credentials dialog with the specified owner and save checkbox status.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
            <param name="saveChecked">True if the save checkbox is checked.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>Shows the credentials dialog with the specified owner, name and password.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
            <param name="name">The name for the credentials.</param>
            <param name="password">The password for the credentials.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Boolean)">
            <summary>Shows the credentials dialog with the specified owner, name, password and save checkbox status.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
            <param name="name">The name for the credentials.</param>
            <param name="password">The password for the credentials.</param>
            <param name="saveChecked">True if the save checkbox is checked.</param>
            <returns>Returns a DialogResult indicating the user action.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.Confirm(System.Boolean)">
            <summary>Confirmation action to be applied.</summary>
            <param name="value">True if the credentials should be persisted.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>Returns a DialogResult indicating the user action.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
            <remarks>
            Sets the name, password and SaveChecked accessors to the state of the dialog as it was dismissed by the user.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.GetInfo(System.Windows.Forms.IWin32Window)">
            <summary>Returns the info structure for dialog display settings.</summary>
            <param name="owner">The System.Windows.Forms.IWin32Window the dialog will display in front of.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.GetFlags">
            <summary>Returns the flags for dialog display options.</summary>
        </member>
        <member name="M:Dependinator.Utils.UI.CredentialsDialog.GetDialogResult(Dependinator.Utils.UI.CREDUI.ReturnCodes)">
            <summary>Returns a DialogResult from the specified code.</summary>
            <param name="code">The credential return code.</param>
        </member>
        <member name="F:Dependinator.Utils.UI.CREDUI.MAX_MESSAGE_LENGTH">
            <summary>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secauthn/security/authentication_constants.asp</summary>
        </member>
        <member name="T:Dependinator.Utils.UI.CREDUI.FLAGS">
            <summary>
            http://www.pinvoke.net/default.aspx/Enums.CREDUI_FLAGS
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/dpapiusercredentials.asp
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secauthn/security/creduipromptforcredentials.asp
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.CREDUI.ReturnCodes">
            <summary>http://www.pinvoke.net/default.aspx/Enums.CredUIReturnCodes</summary>
        </member>
        <member name="T:Dependinator.Utils.UI.CREDUI.INFO">
            <summary>
            http://www.pinvoke.net/default.aspx/Structures.CREDUI_INFO
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secauthn/security/credui_info.asp
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.CREDUI.PromptForCredentials(Dependinator.Utils.UI.CREDUI.INFO@,System.String,System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@,Dependinator.Utils.UI.CREDUI.FLAGS)">
            <summary>
            http://www.pinvoke.net/default.aspx/credui.CredUIPromptForCredentialsW
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secauthn/security/creduipromptforcredentials.asp
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.CREDUI.ConfirmCredentials(System.String,System.Boolean)">
            <summary>
            http://www.pinvoke.net/default.aspx/credui.CredUIConfirmCredentials
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/secauthn/security/creduiconfirmcredentials.asp
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.VirtualItemsSource.VirtualArea">
            <summary>
            The virtual area, which would be needed to show all commits
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualItemsSource.GetVirtualItemIds(System.Windows.Rect)">
            <summary>
            Returns range of item ids, which are visible in the view area currently shown
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualItemsSource.GetVirtualItem(System.Int32)">
            <summary>
            Returns the item corresponding to the specified id.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter">
            <summary>
            Represents the converter that performs simple arithmetic operations on numeric values. 
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.Default">
            <summary>
            Gets the default instance of an arithmetic converter.
            </summary>
            <value>
            A shared instance of an <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter"/>.
            </value>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Applies a unary arithmetic operator to a numeric value and returns the result.
            </summary>
            <param name="value">Input value that is convertable via 
            <see cref="M:System.Convert.ToDouble(System.Object)"/>.</param>
            <param name="targetType">Ignored; the target type is always <see cref="T:System.Double"/>.</param>
            <param name="parameter">The unary arithmetic operator(s) to apply to the value.  Supported 
            operators are + (Math.Abs) and - (Negate).</param>
            <param name="culture">An <see cref="T:System.IFormatProvider"/> interface implementation that 
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Double"/> that is the result of transitively applying the operations 
            in the <paramref name="parameter"/> to the <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Transitively applies a binary arithmetic operator to a set of numeric values and returns 
            the result. 
            </summary>
            <param name="values">Input values that are convertable via 
            <see cref="M:System.Convert.ToDouble(System.Object)"/>.</param>
            <param name="targetType">Ignored; the target type is always <see cref="T:System.Double"/>.</param>
            <param name="parameter">The binary arithmetic operator(s) to apply to the values.  
            Supported operators are +, -, *, /, %, and ^.  The number of operators must be exactly one 
            fewer than the number of values.</param>
            <param name="culture">An <see cref="T:System.IFormatProvider"/> interface implementation that 
            supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Double"/> that is the result of transitively applying the operations 
            in the <paramref name="parameter"/> to the <paramref name="values"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.Interpret(System.Char,System.Double)">
            <summary>
            Performs the given unary <paramref name="operation"/> on a single operand.
            </summary>
            <param name="operation">The operation to perform.</param>
            <param name="operand">The operand.</param>
            <returns>The result of applying the <paramref name="operation"/> to the 
            <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.Interpret(System.Char,System.Double,System.Double)">
            <summary>
            Performs the given binary <paramref name="operation"/> on two operands.
            </summary>
            <param name="operation">The operation to perform.</param>
            <param name="operand1">The first operand.</param>
            <param name="operand2">The second operand.</param>
            <returns>The result of <paramref name="operand1"/> <paramref name="operation"/> <paramref name="operand2"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ArithmeticConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource">
            <summary>
            Provides a two-dimensional index of items that can be quickly queried for all items that 
            intersect a given rectangle.
            </summary>
            <remarks>
            When the <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> is hosting items for an ItemsControl, 
            the ItemsControl.ItemsSource can implement this interface to greatly speed up 
            virtualization in the canvas.
            If any of those conditions are not true, then the canvas must realize every item at least 
            once in order to determine its bounds before it can virtualize it, and then once it is 
            virtualized it will have no means of moving spontaneously back into view.
            </remarks>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource.Extent">
            <summary>
            Gets the entire extent of the index, which is typically the union of all bounding boxes 
            of all items within the set.
            </summary>
            <remarks>
            This value is used when determining the extent of the scroll bars when the canvas is 
            hosted in a scroll viewer.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource.Query(System.Windows.Rect)">
            <summary>
            Gets the set of items that intersect the given rectangle.
            </summary>
            <param name="rectangle">The area in which any intersecting items are returned.</param>
            <returns>A result set of all items that intersect the given rectangle.
            </returns>
            <remarks>
            The enumerator returned by this method is used lazily and sometimes only partially, 
            meaning it should return quickly without computing the entire result set immediately for 
            best results.
            </remarks>
        </member>
        <member name="E:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource.ExtentChanged">
            <summary>
            Occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource.Extent"/> property has changed.
            </summary>
        </member>
        <member name="E:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource.QueryInvalidated">
            <summary>
            Occurs when the results of the last query are no longer valid and should be re-queried.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.LinkedListExtensions">
            <summary>
            Provides extension methods for LinkedList.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.LinkedListExtensions.FindNext``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>
            Finds the next node after the given node that contains the specified value.
            </summary>
            <typeparam name="T">The type of value in the linked list.</typeparam>
            <param name="list">The linked list.</param>
            <param name="node">The node after which to search for the value in the linked list, or 
            <c>null</c> to search from the beginning.</param>
            <param name="value">The value to locate in the linked list.</param>
            <returns>The first node after the given node that contains the specified value, if 
            found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.LinkedListExtensions.FindPrevious``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0},``0)">
            <summary>
            Finds the previous node before the given node that contains the specified value.
            </summary>
            <typeparam name="T">The type of value in the linked list.</typeparam>
            <param name="list">The linked list.</param>
            <param name="node">The node before which to search for the value in the linked list, 
            or <c>null</c> to search from the end.</param>
            <param name="value">The value to locate in the linked list.</param>
            <returns>The first node before the given node that contains the specified value, if 
            found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.MathExtensions">
            <summary>Provides extension methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Ceiling(System.Decimal)">
            <summary>Returns the smallest integer greater than or equal to the specified decimal number.</summary>
            <returns>The smallest integer greater than or equal to value.</returns>
            <param name="value">A decimal number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Ceiling(System.Double)">
            <summary>Returns the smallest integer greater than or equal to the specified double-precision floating-point number.</summary>
            <returns>The smallest integer greater than or equal to value. If value is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.</returns>
            <param name="value">A double-precision floating-point number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Floor(System.Decimal)">
            <summary>Returns the largest integer less than or equal to the specified decimal number.</summary>
            <returns>The largest integer less than or equal to value.</returns>
            <param name="value">A decimal number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Floor(System.Double)">
            <summary>Returns the largest integer less than or equal to the specified double-precision floating-point number.</summary>
            <returns>The largest integer less than or equal to value. If value is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.</returns>
            <param name="value">A double-precision floating-point number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Byte,System.Byte)">
            <summary>Returns the larger of two 8-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Decimal,System.Decimal)">
            <summary>Returns the larger of two decimal numbers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Double,System.Double)">
            <summary>Returns the larger of two double-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is larger. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Single,System.Single)">
            <summary>Returns the larger of two single-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is larger. If a, or b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Int16,System.Int16)">
            <summary>Returns the larger of two 16-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Int32,System.Int32)">
            <summary>Returns the larger of two 32-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.Int64,System.Int64)">
            <summary>Returns the larger of two 64-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.SByte,System.SByte)">
            <summary>Returns the larger of two 8-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.UInt16,System.UInt16)">
            <summary>Returns the larger of two 16-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.UInt32,System.UInt32)">
            <summary>Returns the larger of two 32-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtLeast(System.UInt64,System.UInt64)">
            <summary>Returns the larger of two 64-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is larger.</returns>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Byte,System.Byte)">
            <summary>Returns the smaller of two 8-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Decimal,System.Decimal)">
            <summary>Returns the smaller of two decimal numbers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Double,System.Double)">
            <summary>Returns the smaller of two double-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is smaller. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Single,System.Single)">
            <summary>Returns the smaller of two single-precision floating-point numbers.</summary>
            <returns>Parameter a or b, whichever is smaller. If a, b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Int16,System.Int16)">
            <summary>Returns the smaller of two 16-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Int32,System.Int32)">
            <summary>Returns the smaller of two 32-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.Int64,System.Int64)">
            <summary>Returns the smaller of two 64-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.SByte,System.SByte)">
            <summary>Returns the smaller of two 8-bit signed integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 8-bit signed integers to compare.</param>
            <param name="b">The second of two 8-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.UInt16,System.UInt16)">
            <summary>Returns the smaller of two 16-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.UInt32,System.UInt32)">
            <summary>Returns the smaller of two 32-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.AtMost(System.UInt64,System.UInt64)">
            <summary>Returns the smaller of two 64-bit unsigned integers.</summary>
            <returns>Parameter a or b, whichever is smaller.</returns>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>Returns the value constrained inclusively between two 8-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 8-bit unsigned integers to compare.</param>
            <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Returns the value constrained inclusively between two decimal numbers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two <see cref="T:System.Decimal"/> numbers to compare.</param>
            <param name="b">The second of two <see cref="T:System.Decimal"/> numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>Returns the value constrained inclusively between two double-precision floating-point numbers.</summary>
            <returns>A value between a and b inclusively. If a, b, or both a and b are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two double-precision floating-point numbers to compare.</param>
            <param name="b">The second of two double-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Single,System.Single,System.Single)">
            <summary>Returns the value constrained inclusively between two single-precision floating-point numbers.</summary>
            <returns>A value between a and b inclusively. If a, b, or both a and b are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two single-precision floating-point numbers to compare.</param>
            <param name="b">The second of two single-precision floating-point numbers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>Returns the value constrained inclusively between two 16-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 16-bit signed integers to compare.</param>
            <param name="b">The second of two 16-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>Returns the value constrained inclusively between two 32-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 32-bit signed integers to compare.</param>
            <param name="b">The second of two 32-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>Returns the value constrained inclusively between two 64-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 64-bit signed integers to compare.</param>
            <param name="b">The second of two 64-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>Returns the value constrained inclusively between two 8-bit signed integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 8-bit signed integers to compare.</param>
            <param name="b">The second of two 8-bit signed integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>Returns the value constrained inclusively between two 16-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 16-bit unsigned integers to compare.</param>
            <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>Returns the value constrained inclusively between two 32-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 32-bit unsigned integers to compare.</param>
            <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>Returns the value constrained inclusively between two 64-bit unsigned integers.</summary>
            <returns>A value between a and b inclusively.</returns>
            <param name="value">The value to restrict between a and b.</param>
            <param name="a">The first of two 64-bit unsigned integers to compare.</param>
            <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Decimal)">
            <summary>Rounds a decimal value to the nearest integer.</summary>
            <returns>The integer nearest parameter value. If value is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Double)">
            <summary>Rounds a double-precision floating-point value to the nearest integer.</summary>
            <returns>The integer nearest value. If value is halfway between two integers, one of which is even and the other odd, then the even number is returned.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Decimal,System.Int32)">
            <summary>Rounds a decimal value to a specified precision.</summary>
            <returns>The number nearest value with a precision equal to decimals. If value is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of value is less than decimals, then value is returned unchanged.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="decimals">The number of significant decimal places  (precision) in the return value.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">decimals is less than 0 or greater than 28.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Decimal,System.MidpointRounding)">
            <summary>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The integer nearest value. If value is halfway between two numbers, one of which is even and the other odd, then mode determines which of the two is returned.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Double,System.Int32)">
            <summary>Rounds a double-precision floating-point value to the specified precision.</summary>
            <returns>The number nearest value with a precision equal to digits. If value is halfway between two numbers, one of which is even and the other odd, then the even number is returned. If the precision of value is less than digits, then value is returned unchanged.</returns>
            <param name="digits">The number of significant digits (precision) in the return value.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Double,System.MidpointRounding)">
            <summary>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The integer nearest value. If value is halfway between two integers, one of which is even and the other odd, then mode determines which of the two is returned.</returns>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The number nearest value with a precision equal to decimals. If value is halfway between two numbers, one of which is even and the other odd, then mode determines which of the two numbers is returned. If the precision of value is less than decimals, then value is returned unchanged.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="decimals">The number of significant decimal places  (precision) in the return value.</param>
            <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">decimals is less than 0 or greater than 28.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>Rounds a double-precision floating-point value to the specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</summary>
            <returns>The number nearest value with a precision equal to digits. If value is halfway between two numbers, one of which is even and the other odd, then the mode parameter determines which number is returned. If the precision of value is less than digits, then value is returned unchanged.</returns>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <param name="digits">The number of significant digits (precision) in the return value.</param>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
            <exception cref="T:System.ArgumentException">mode is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Double,System.Double)">
            <summary>Rounds a double-precision floating-point value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Single,System.Single)">
            <summary>Rounds a single-precision floating-point value to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int64,System.Int64)">
            <summary>Rounds a 64-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int32,System.Int32)">
            <summary>Rounds a 32-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int16,System.Int16)">
            <summary>Rounds a 16-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Byte,System.Byte)">
            <summary>Rounds a 8-bit signed integer to the next multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is greater than or equal to value.</returns>
            <param name="value">A 8-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Decimal)">
            <summary>Rounds a decimal value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Double)">
            <summary>Rounds a double-precision floating-point value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Single)">
            <summary>Rounds a single-precision floating-point value to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int64)">
            <summary>Rounds a 64-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int32)">
            <summary>Rounds a 32-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Int16)">
            <summary>Rounds a 16-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundUp(System.Byte)">
            <summary>Rounds a 8-bit signed integer to the next integer.</summary>
            <returns>The nearest integer that is greater than or equal to value.</returns>
            <param name="value">A 8-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Decimal,System.Decimal)">
            <summary>Rounds a decimal value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Double,System.Double)">
            <summary>Rounds a double-precision floating-point value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Single,System.Single)">
            <summary>Rounds a single-precision floating-point value to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int64,System.Int64)">
            <summary>Rounds a 64-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int32,System.Int32)">
            <summary>Rounds a 32-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int16,System.Int16)">
            <summary>Rounds a 16-bit signed integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Byte,System.Byte)">
            <summary>Rounds an 8-bit unsigned integer to the previous multiple of the specified factor.</summary>
            <returns>The nearest multiple of factor that is less than or equal to value.</returns>
            <param name="value">An 8-bit unsigned integer to be rounded.</param>
            <param name="factor">The factor to round the value to.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Decimal)">
            <summary>Rounds a decimal value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A decimal number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Double)">
            <summary>Rounds a double-precision floating-point value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Single)">
            <summary>Rounds a single-precision floating-point value to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A single-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int64)">
            <summary>Rounds a 64-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 64-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int32)">
            <summary>Rounds a 32-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 32-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Int16)">
            <summary>Rounds a 16-bit signed integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">A 16-bit signed integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.RoundDown(System.Byte)">
            <summary>Rounds an 8-bit unsigned integer to the previous integer.</summary>
            <returns>The nearest integer that is less than or equal to value.</returns>
            <param name="value">An 8-bit unsigned integer to be rounded.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Truncate(System.Decimal)">
            <summary>Calculates the integral part of a specified decimal number.</summary>
            <returns>The integral part of value; that is, the number that remains after any fractional digits have been discarded.</returns>
            <param name="value">A number to truncate.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Truncate(System.Double)">
            <summary>Calculates the integral part of a specified double-precision floating-point number.</summary>
            <returns>The integral part of value; that is, the number that remains after any fractional digits have been discarded.</returns>
            <param name="value">A number to truncate.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Decimal)">
            <summary>Returns the absolute value of a <see cref="T:System.Decimal"/> number.</summary>
            <returns>A <see cref="T:System.Decimal"/>, x, such that 0 ≤ x ≤ <see cref="F:System.Decimal.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Decimal.MinValue"/> ≤ value ≤ <see cref="F:System.Decimal.MaxValue"/>.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Double)">
            <summary>Returns the absolute value of a double-precision floating-point number.</summary>
            <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Double.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Double.MinValue"/> ≤ value ≤ <see cref="F:System.Double.MaxValue"/>.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Single)">
            <summary>Returns the absolute value of a single-precision floating-point number.</summary>
            <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Single.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Single.MinValue"/> ≤ value ≤ <see cref="F:System.Single.MaxValue"/>.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Int16)">
            <summary>Returns the absolute value of a 16-bit signed integer.</summary>
            <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int16.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int16.MinValue"/> &lt; value ≤ <see cref="F:System.Int16.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int16.MinValue"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Int32)">
            <summary>Returns the absolute value of a 32-bit signed integer.</summary>
            <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int32.MinValue"/> &lt; value ≤ <see cref="F:System.Int32.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int32.MinValue"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.Int64)">
            <summary>Returns the absolute value of a 64-bit signed integer.</summary>
            <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.Int64.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.Int64.MinValue"/> &lt; value ≤ <see cref="F:System.Int64.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.Int64.MinValue"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Abs(System.SByte)">
            <summary>Returns the absolute value of an 8-bit signed integer.</summary>
            <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤ <see cref="F:System.SByte.MaxValue"/>.</returns>
            <param name="value">A number in the range <see cref="F:System.SByte.MinValue"/> &lt; value ≤ <see cref="F:System.SByte.MaxValue"/>.</param>
            <exception cref="T:System.OverflowException">value equals <see cref="F:System.SByte.MinValue"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.BigMul(System.Int32,System.Int32)">
            <summary>Produces the full product of two 32-bit numbers.</summary>
            <returns>The <see cref="T:System.Int64"/> containing the product of the specified numbers.</returns>
            <param name="a">The first <see cref="T:System.Int32"/> to multiply.</param>
            <param name="b">The second <see cref="T:System.Int32"/> to multiply.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</summary>
            <returns>The <see cref="T:System.Int32"/> containing the quotient of the specified numbers.</returns>
            <param name="a">The <see cref="T:System.Int32"/> that contains the dividend.</param>
            <param name="result">The <see cref="T:System.Int32"/> that receives the remainder.</param>
            <param name="b">The <see cref="T:System.Int32"/> that contains the divisor.</param>
            <exception cref="T:System.DivideByZeroException">b is zero.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.DivRem(System.Int64,System.Int64,System.Int64@)">
            <summary>Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</summary>
            <returns>The <see cref="T:System.Int64"/> containing the quotient of the specified numbers.</returns>
            <param name="a">The <see cref="T:System.Int64"/> that contains the dividend.</param>
            <param name="result">The <see cref="T:System.Int64"/> that receives the remainder.</param>
            <param name="b">The <see cref="T:System.Int64"/> that contains the divisor.</param>
            <exception cref="T:System.DivideByZeroException">b is zero.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Exp(System.Double)">
            <summary>Returns e raised to the specified power.</summary>
            <returns>The number e raised to the power value. If value equals <see cref="F:System.Double.NaN"/> or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned. If value equals <see cref="F:System.Double.NegativeInfinity"/>, 0 is returned.</returns>
            <param name="value">A number specifying a power.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IEEERemainder(System.Double,System.Double)">
            <summary>Returns the remainder resulting from the division of a specified number by another specified number.</summary>
            <returns>A number equal to x - (y Q), where Q is the quotient of x / y rounded to the nearest integer (if x / y falls halfway between two integers, the even integer is returned).If x - (y Q) is zero, the value +0 is returned if x is positive, or -0 if x is negative. If y = 0, <see cref="F:System.Double.NaN"/> (Not-A-Number) is returned.</returns>
            <param name="y">A divisor.</param>
            <param name="x">A dividend.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Log(System.Double)">
            <summary>Returns the natural (base e) logarithm of a specified number.</summary>
            <returns>See <see cref="M:System.Math.Log(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Log(System.Double,System.Double)">
            <summary>Returns the logarithm of a specified number in a specified base.</summary>
            <returns>See <see cref="M:System.Math.Log(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
            <param name="newBase">The base of the logarithm.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Log10(System.Double)">
            <summary>Returns the base 10 logarithm of a specified number.</summary>
            <returns>See <see cref="M:System.Math.Log10(System.Double)"/> for details.</returns>
            <param name="value">A number whose logarithm is to be found.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Pow(System.Double,System.Double)">
            <summary>Returns a specified number raised to the specified power.</summary>
            <returns>The number x raised to the power y. See <see cref="M:System.Math.Pow(System.Double,System.Double)"/> for details.</returns>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Decimal)">
            <summary>Returns a value indicating the sign of a decimal number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed <see cref="T:System.Decimal"/> number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Double)">
            <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
            <exception cref="T:System.ArithmeticException">value is equal to <see cref="F:System.Double.NaN"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Single)">
            <summary>Returns a value indicating the sign of a single-precision floating-point number.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
            <exception cref="T:System.ArithmeticException">value is equal to <see cref="F:System.Single.NaN"/>.</exception>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Int16)">
            <summary>Returns a value indicating the sign of a 16-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Int32)">
            <summary>Returns a value indicating the sign of a 32-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.Int64)">
            <summary>Returns a value indicating the sign of a 64-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sign(System.SByte)">
            <summary>Returns a value indicating the sign of an 8-bit signed integer.</summary>
            <returns>A number indicating the sign of value.Number Description -1 value is less than zero. 0 value is equal to zero. 1 value is greater than zero.</returns>
            <param name="value">A signed number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sqrt(System.Double)">
            <summary>Returns the square root of a specified number.</summary>
            <returns><see cref="M:System.Math.Sqrt(System.Double)"/> for details.</returns>
            <param name="value">A number.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Determines whether a decimal value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A decimal value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Double,System.Double,System.Double)">
            <summary>Determines whether a double-precision floating-point value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A double-precision floating-point value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Single,System.Single,System.Single)">
            <summary>Determines whether a single-precision floating-point value is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A double-precision floating-point value to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>Determines whether a 64-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 64-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>Determines whether a 32-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 32-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Int16,System.Int16,System.Int16)">
            <summary>Determines whether a 16-bit signed integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">A 16-bit signed integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsBetween(System.Byte,System.Byte,System.Byte)">
            <summary>Determines whether an 8-bit unsigned integer is inclusively between two values.</summary>
            <returns>A boolean representing whether value is inclusively between a and b.</returns>
            <param name="value">An 8-bit unsigned integer to compare.</param>
            <param name="a">The first bound to compare value against.</param>
            <param name="b">The second bound to compare value against.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsNaN(System.Double)">
            <summary>Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>true if value evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
            <param name="value">A double-precision floating-point number. </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsNaN(System.Single)">
            <summary>Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>true if value evaluates to not a number (<see cref="F:System.Single.NaN"/>); otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.GetValueOrDefault(System.Double)">
            <summary>Retrieves the value of the specified number, or zero if it's not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Double.NaN"/>; otherwise, 0.0.</returns>
            <param name="value">A double-precision floating-point number. </param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.GetValueOrDefault(System.Double,System.Double)">
            <summary>Retrieves the value of the specified number, or the specified default value if it's not a number (<see cref="F:System.Double.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Double.NaN"/>; otherwise, the <paramref name="defaultValue"/> parameter.</returns>
            <param name="value">A double-precision floating-point number. </param>
            <param name="defaultValue">The value to return if <see cref="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsNaN(System.Double)"/> returns true.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.GetValueOrDefault(System.Single)">
            <summary>Retrieves the value of the specified number, or zero if it's not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Single.NaN"/>; otherwise, 0.0.</returns>
            <param name="value">A single-precision floating-point number. </param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.GetValueOrDefault(System.Single,System.Single)">
            <summary>Retrieves the value of the specified number, or the specified default value if it's not a number (<see cref="F:System.Single.NaN"/>).</summary>
            <returns>The value of the <paramref name="value"/> parameter if it doesn't evaluate to <see cref="F:System.Single.NaN"/>; otherwise, the <paramref name="defaultValue"/> parameter.</returns>
            <param name="value">A single-precision floating-point number. </param>
            <param name="defaultValue">The value to return if <see cref="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.IsNaN(System.Double)"/> returns true.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Acos(System.Double)">
            <summary>Returns the angle whose cosine is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- <see cref="F:System.Double.NaN"/> if value &lt; -1 or value &gt; 1.</returns>
            <param name="value">A number representing a cosine, where -1 ≤ value ≤ 1.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Asin(System.Double)">
            <summary>Returns the angle whose sine is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- <see cref="F:System.Double.NaN"/> if value &lt; -1 or value &gt; 1.</returns>
            <param name="value">A number representing a sine, where -1 ≤ value ≤ 1.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Atan(System.Double)">
            <summary>Returns the angle whose tangent is the specified number.</summary>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- <see cref="F:System.Double.NaN"/> if value equals <see cref="F:System.Double.NaN"/>, -π/2 rounded to double precision (-1.5707963267949) if value equals <see cref="F:System.Double.NegativeInfinity"/>, or π/2 rounded to double precision (1.5707963267949) if value equals <see cref="F:System.Double.PositiveInfinity"/>.</returns>
            <param name="value">A number representing a tangent.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Atan2(System.Double,System.Double)">
            <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>
            <returns>An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. See <see cref="M:System.Math.Atan2(System.Double,System.Double)"/> for details.</returns>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Cos(System.Double)">
            <summary>Returns the cosine of the specified angle.</summary>
            <returns>The cosine of angle.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Cosh(System.Double)">
            <summary>Returns the hyperbolic cosine of the specified angle.</summary>
            <returns>The hyperbolic cosine of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/> or <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/> is returned. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sin(System.Double)">
            <summary>Returns the sine of the specified angle.</summary>
            <returns>The sine of angle. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Sinh(System.Double)">
            <summary>Returns the hyperbolic sine of the specified angle.</summary>
            <returns>The hyperbolic sine of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NaN"/>, this method returns a <see cref="T:System.Double"/> equal to angle.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Tan(System.Double)">
            <summary>Returns the tangent of the specified angle.</summary>
            <returns>The tangent of angle. If angle is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.Tanh(System.Double)">
            <summary>Returns the hyperbolic tangent of the specified angle.</summary>
            <returns>The hyperbolic tangent of angle. If angle is equal to <see cref="F:System.Double.NegativeInfinity"/>, this method returns -1. If angle is equal to <see cref="F:System.Double.PositiveInfinity"/>, this method returns 1. If angle is equal to <see cref="F:System.Double.NaN"/>, this method returns <see cref="F:System.Double.NaN"/>.</returns>
            <param name="angle">An angle, measured in radians.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Decimal,System.Decimal)">
            <summary>Generates a sequence of decimal numbers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Decimal,System.Decimal,System.Decimal)">
            <summary>Generates a sequence of decimal numbers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Double,System.Double)">
            <summary>Generates a sequence of double-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Double,System.Double,System.Double)">
            <summary>Generates a sequence of double-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Single,System.Single)">
            <summary>Generates a sequence of single-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Single,System.Single,System.Single)">
            <summary>Generates a sequence of single-precision floating-point values within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int64,System.Int64)">
            <summary>Generates a sequence of 64-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int64,System.Int64,System.Int64)">
            <summary>Generates a sequence of 64-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int32,System.Int32)">
            <summary>Generates a sequence of 32-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int32,System.Int32,System.Int32)">
            <summary>Generates a sequence of 32-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int16,System.Int16)">
            <summary>Generates a sequence of 16-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is 1 greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.MathExtensions.To(System.Int16,System.Int16,System.Int16)">
            <summary>Generates a sequence of 16-bit signed integers within a specified range.</summary>
            <returns>A sequence of numbers from start to (but not including) bound where each number is a given step greater than the previous number.</returns>
            <param name="start">The number to start from.</param>
            <param name="bound">The number to stop before.</param>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1">
            <summary>
            This class efficiently stores and lazily retrieves arbitrarily sized and positioned objects in a prioritized order in a quad-tree data structure.
            This can be used to do efficient hit detection or visibility checks on objects in a two dimensional space.
            The object does not need to implement any special interface because the Rect Bounds of those objects is handled as a separate argument to Insert.
            </summary>
            <remarks>
            Original class written by Chris Lovett.
            Prioritization and lazy enumeration added by Kael Rowan.
            </remarks>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode">
            <summary>
            Each node stored in the tree has a position, width and height.        
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.#ctor(`0,System.Windows.Rect,System.Double)">
            <summary>
            Construct new QuadNode to wrap the given node with given bounds.
            </summary>
            <param name="node">The node with generic type T.</param>
            <param name="bounds">The bounds of that node.</param>
            <param name="priority">The priority of that node.</param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.Node">
            <summary>
            The wrapped node.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.Bounds">
            <summary>
            The Rect bounds of the node.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.Priority">
            <summary>
            The priority of the node.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.Next">
            <summary>
            QuadNodes form a linked list in the Quadrant.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.InsertInto(Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree{`0}.QuadNode)">
            <summary>
            Inserts this QuadNode into an existing list and returns the new tail of the list.
            </summary>
            <param name="tail">The tail of an existing circular linked list of QuadNodes, or <c>null</c> if this is the first.</param>
            <returns>The (possibly new) tail of the circular linked list after inserting this QuadNode into it.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.GetNodesIntersecting(System.Windows.Rect)">
            <summary>
            Walk the linked list of QuadNodes and check them against the given bounds.
            </summary>
            <param name="bounds">The bounds to test against each node.</param>
            <returns>A lazy list of nodes along with the priority of the next node.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.GetNodesInside(System.Windows.Rect)">
            <summary>
            Walk the linked list of QuadNodes and check them against the given bounds.
            </summary>
            <param name="bounds">The bounds to test against each node.</param>
            <returns>A lazy list of nodes along with the priority of the next node.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.HasNodesIntersecting(System.Windows.Rect)">
            <summary>
            Walk the linked list and test each node against the given bounds.
            </summary>
            <param name="bounds">Bounds to test.</param>
            <returns>Return true if a node in the list intersects the bounds.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.QuadNode.HasNodesInside(System.Windows.Rect)">
            <summary>
            Walk the linked list and test each node against the given bounds.
            </summary>
            <param name="bounds">Bounds to test.</param>
            <returns>Return true if a node in the list is inside the bounds.</returns>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant">
            <summary>
            The quad tree is split up into four Quadrants and objects are stored in the quadrant that contains them
            and each quadrant is split up into four child Quadrants recurrsively.  Objects that overlap more than
            one quadrant are stored in the nodes list for this Quadrant.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.#ctor(System.Windows.Rect)">
            <summary>
            Construct new Quadrant with a given bounds all nodes stored inside this quadrant
            will fit inside this bounds.  
            </summary>
            <param name="bounds">The bounds of this quadrant</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.Insert(`0,System.Windows.Rect,System.Double,System.Int32)">
            <summary>
            Insert the given node.
            </summary>
            <param name="node">The wrapped node.</param>
            <param name="bounds">The bounds of that node.</param>
            <param name="priority">The priority of that node.</param>
            <param name="depth">The recursive depth of this call, to avoid stack overflows.</param>
            <returns>The quadrant that ultimately holds the node.</returns>            
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.Remove(`0,System.Windows.Rect)">
            <summary>
            Removes the first occurance of the given node from this quadrant or any child quadrants within the search bounds.
            </summary>
            <param name="node">The node to remove.</param>
            <param name="bounds">The bounds to search within.</param>
            <returns><c>true</c> if the node was found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.GetNodesIntersecting(System.Windows.Rect)">
            <summary>
            Returns all nodes in this quadrant that intersect the given bounds.
            The nodes are returned in order of descending priority.
            </summary>
            <param name="bounds">The bounds that intersects the nodes you want returned.</param>
            <returns>A lazy list of nodes along with the new potential of this quadrant.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.GetNodesInside(System.Windows.Rect)">
            <summary>
            Returns all nodes in this quadrant that are fully contained within the given bounds.
            The nodes are returned in order of descending priority.
            </summary>
            <param name="bounds">The bounds that contains the nodes you want returned.</param>
            <returns>A lazy list of nodes along with the new potential of this quadrant.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.HasNodesInside(System.Windows.Rect)">
            <summary>
            Return true if there are any nodes in this Quadrant are inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test</param>
            <returns><c>true</c> if this quadrant or its subquadrants has nodes inside the bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.HasNodesIntersecting(System.Windows.Rect)">
            <summary>
            Return true if there are any nodes in this Quadrant that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test</param>
            <returns><c>true</c> if this quadrant or its subquadrants has nodes intersecting the bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.RemoveNode(`0)">
            <summary>
            Remove the given node from this Quadrant.(non-recursive)
            </summary>
            <param name="node">The node to remove.</param>            
            <returns>Returns true if the node was found and removed.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.CalculatePotential">
            <summary>
            The maximum priority for this quadrant's and all of its subquadrants' nodes.
            </summary>
            <returns>The maximum priority for this quadrant's and all of its subquadrants' nodes.</returns>
            <remarks>This call assumes that the potential is correctly set on the subquadrants.</remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Quadrant.GetEnumerator">
            <summary>
            Enumerates over all nodes within this quadrant in random order.
            </summary>
            <returns>
            Enumerator that enumerates over all its nodes.
            </returns>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1._extent">
            <summary>
            The extent defines the subdivisible bounds of the quad tree index.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1._root">
            <summary>
            The outer PriorityQuadTree class is essentially just a wrapper around a tree of Quadrants.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.MaxTreeDepth">
            <summary>
            The MaxTreeDepth limit is required since recursive calls can go that deep if item bounds (height or width) are very small compared to Extent (height or width).
            The max depth will prevent stack overflow exception in some of the recursive calls we make.
            With a value of 50 the item bounds can be 2^-50 times the extent before the tree stops growing in height.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Extent">
            <summary>
            The extent determines the overall quad-tree indexing strategy.
            Changing this bounds is expensive since it has to re-divide the entire thing - like a re-hash operation.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Insert(`0,System.Windows.Rect,System.Double)">
            <summary>
            Insert an item with given bounds and priority into this QuadTree.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="bounds">The bounds of this item.</param>
            <param name="priority">The priority to return this item before others in query results.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.HasItemsInside(System.Windows.Rect)">
            <summary>
            Gets whether any items are fully inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns><c>true</c> if any items are inside the given bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)">
            <summary>
            Get a list of the items that are fully inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The items that are inside the given bounds, returned in the order given by the priority assigned during Insert.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.HasItemsIntersecting(System.Windows.Rect)">
            <summary>
            Gets whether any items intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns><c>true</c> if any items intersect the given bounds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.GetItemsIntersecting(System.Windows.Rect)">
            <summary>
            Get list of nodes that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The items that intersect the given bounds, returned in the order given by the priority assigned during Insert.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Remove(`0)">
            <summary>
            Removes the first instance of the given item from the tree (if it exists) by searching through the entire tree for the item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item was found and removed; otherwise, <c>false</c>.</returns>
            <remarks>
            This overload does a full search through the entire tree for the item.
            Clients should instead call the overload that takes a <see cref="T:System.Windows.Rect"/> if the bounds of the item are known.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Remove(`0,System.Windows.Rect)">
            <summary>
            Removes the first instance of the given item that intersects the given bounds from the tree (if it exists).
            </summary>
            <param name="item">The item to remove.</param>
            <param name="bounds">The bounds within to search for the item.</param>
            <returns><c>true</c> if the item was found and removed; otherwise, <c>false</c>.</returns>
            <remarks>
            This overload does a partial search through the tree, so if the <paramref name="bounds"/> do not intersect the node then the node will be missed.
            Clients should instead call the overload that does not take a <see cref="T:System.Windows.Rect"/> if the bounds of the item are not known.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.Clear">
            <summary>
            Removes all nodes from the tree.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.ReIndex">
            <summary>
            Rebuilds all the Quadrants according to the current QuadTree Bounds.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:Dependinator.Utils.UI.VirtualCanvas.PriorityQuadTree`1.GetItemsInside(System.Windows.Rect)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.PriorityQueue`2">
            <summary>
            Represents a queue of items that are sorted based on individual priorities.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TPriority">Specifies the type of object representing the priority.
            </typeparam>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.RectExtensions">
            <summary>
            Provides extension methods for rects.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.RectExtensions.GetCenter(System.Windows.Rect)">
            <summary>
            Returns the center point of the <see cref="T:System.Windows.Rect"/>.
            </summary>
            <param name="rect">The rect to return the center point of.</param>
            <returns>The center <see cref="T:System.Windows.Point"/> of the <paramref name="rect"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.RectExtensions.IsDefined(System.Windows.Rect)">
            <summary>
            Returns whether the <see cref="T:System.Windows.Rect"/> defines a real area in space.
            </summary>
            <param name="rect">The rect to test.</param>
            <returns><c>true</c> if rect defines an area or point in finite space, which is not the case for <see cref="P:System.Windows.Rect.Empty"/> or if any of the fields are <see cref="F:System.Double.NaN"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.RectExtensions.Intersects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle, properly considering the empty rect and infinities.
            </summary>
            <param name="self">The current rectangle.</param>
            <param name="rect">The rectangle to check.</param>
            <returns><c>true</c> if the specified rectangle intersects with the current rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel">
            <summary>
            Provides a framework for <see cref="T:System.Windows.Controls.Panel"/> elements that virtualize their child data collection. This is an abstract class.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizingProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizing"/> property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.OnIsVirtualizingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizing"/> dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.</param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizing">
            <summary>
            Gets or sets a value that indicates that this <see cref="T:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel"/> is virtualizing its child collection.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizationPriorityProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizationPriority"/> property.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizationPriority">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Threading.DispatcherPriority"/> of the realization pass for this <see cref="T:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel"/>.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IndexForItemContainerProperty">
            <summary>
            This is an attached property that the panel sets on each container (generated or direct) to point back to the index of the item.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeOperation">
            <summary>
            Holds the latest queued realization operation.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.ItemsOwner">
            <summary>
            Returns the <see cref="T:System.Windows.Controls.ItemsControl"/> that this panel hosts items for.
            </summary>
            <value></value>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IndexFromContainer(System.Windows.UIElement)">
            <summary>
            Returns the index to an item that corresponds to the specified, generated <see cref="T:System.Windows.UIElement"/>. 
            </summary>
            <param name="container">The <see cref="T:System.Windows.UIElement"/> that corresponds to the item index to be returned.</param>
            <returns>An <see cref="T:System.Int32"/> index to an item that corresponds to the specified <see cref="T:System.Windows.UIElement"/> if it was generated and hosted by this panel; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.ItemFromContainer(System.Windows.UIElement)">
            <summary>
            Returns the item that corresponds to the specified, generated <see cref="T:System.Windows.UIElement"/>. 
            </summary>
            <param name="container">The <see cref="T:System.Windows.UIElement"/> that corresponds to the item to be returned.</param>
            <returns>An <see cref="T:System.Object"/> that is the item which corresponds to the specified <see cref="T:System.Windows.UIElement"/> if it was generated and hosted by this panel; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Windows.UIElement"/> corresponding to the item at the given index within the item collection if it has been realized.
            </summary>
            <param name="itemIndex">The index of the desired item. </param>
            <returns>The element corresponding to the item at the given index within the item collection or returns <c>null</c> if the item is not realized.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.ContainerFromItem(System.Object)">
            <summary>
            Returns the <see cref="T:System.Windows.UIElement"/> corresponding to the given item if it has been realized.
            </summary>
            <param name="item">The <see cref="T:System.Object"/> item to find the <see cref="T:System.Windows.UIElement"/> for.</param>
            <returns>A <see cref="T:System.Windows.UIElement"/> that corresponds to the given item. Returns <c>null</c> if the item does not belong to the item collection, or if a <see cref="T:System.Windows.UIElement"/> has not been generated for it.</returns>
            <remarks>Use caution when calling this method as it does a linear search for the item.  Consider calling <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.ContainerFromIndex(System.Int32)"/> instead.</remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.InvalidateReality">
            <summary>
            Invalidates the realization state of all items being hosted by this panel. After the invalidation, the panel will have its reality updated, which will occur asynchronously unless subsequently forced by <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.UpdateReality"/>. 
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.UpdateReality">
            <summary>
            Ensures that all items being hosted by this panel are properly realized or virtualized.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeCore(System.Object)">
            <summary>
            Manages calls to <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/>.
            </summary>
            <param name="state">A custom state object left over from a previous call to <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeCore(System.Object)"/> if additional processing was needed.</param>
            <returns>A custom state object if additional processing is needed; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)">
            <summary>
            When overridden in a derived class, realizes and/or virtualizes items, optionally deferring additional realization.
            </summary>
            <param name="items">The current items being hosted by this panel.</param>
            <param name="state">A custom state object left over from a previous call to <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/> if additional processing was needed.</param>
            <returns>Implementations may optionally defer additional processing by return a non-<c>null</c> object, which will then be passed to a future call to <see cref="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeOverride(System.Collections.IEnumerable,System.Object)"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Indicates that the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> property value has changed.
            </summary>
            <param name="oldIsItemsHost">The old property value.</param>
            <param name="newIsItemsHost">The new property value.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.OnIsVirtualizingChanged(System.Boolean,System.Boolean)">
            <summary>
            Indicates that the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizing"/> property value has changed.
            </summary>
            <param name="oldIsVirtualizing">The old property value.</param>
            <param name="newIsVirtualizing">The new property value.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Maintains event handlers when the items source has changed.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that raised the event.</param>
            <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl"/> for this <see cref="T:System.Windows.Controls.Panel"/> changes.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that raised the event.</param>
            <param name="args">Provides data for the <see cref="!:ItemsChanged"/> event.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.RealizeItem(System.Int32)">
            <summary>
            Realizes an item container for the item with the given index.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns>The child that was created and added to the internal children.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.VirtualizeItem(System.Int32)">
            <summary>
            Removes an item container for the item with the given index.
            </summary>
            <param name="itemIndex">The index of the item.</param>
            <returns><c>true</c> if the child had been previously realized and was now removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.VirtualItemsList">
            <summary>
            Returns a list which represents a subset of the elements in the source list. 
            </summary>
            <remarks>
            This list is used in NotifyCollectionChangedEventArgs because we might be dealing with
            virtualized lists that raise events for items changing when the items haven't been
            loaded into memory yet.  If the client needs to inspect the item, then they can index
            into this list and it will retrieve it from the original source, but if they don't need
            to inspect the item then we spare the cost of the lookup and retrieval.
            </remarks>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas">
            <summary>
            Defines an area within which you can explicitly position an infinite number of child elements
            by using coordinates that are relative to the <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> area.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransformProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.CoerceRenderTransform(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a transform applying the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/>
            when <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A new transform if <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>;
            otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnApplyTransformChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> dependency
            property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform">
            <summary>
            Gets or sets whether to automatically apply a <see cref="T:System.Windows.Media.ScaleTransform"/> to the canvas.
            </summary>
            <value><c>true</c> or <c>false</c>.  The default is true.</value>
            <remarks>
            The value of this dependency property is <c>true</c> by default, meaning that the 
            RenderTransform/> property will contain a <see cref="T:System.Windows.Media.Transform"/> that scales
            the canvas and its children automatically.
            This property can be set to <c>false</c> prevent the automatic transform.  This means that
            children are responsible for changing their appearance when the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> property
            changes.
            Note that this property does not affect the <b>placement</b> of the elements; the children
            are automatically placed with the top-left corners of their elements at the appropriate
            positions on the screen, regardless of the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/>.
            <para>
            Children will usually do this by simply changing their <see cref="!:Width"/> and
            <see cref="!:Height"/> to become larger or smaller when the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> property
            increases or decreases.
            This is useful when pen widths are important, such as an element surrounded with a
            <see cref="T:System.Windows.Controls.Border"/> with <see cref="P:System.Windows.Controls.Border.BorderThickness"/> set to <c>1.0</c>.
            If <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, then as <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> decreases
            the shape will be scaled down and the border stroke will become thinner than one pixel,
            possibly too thin to see even with sub-pixel rendering.
            This is also true when drawing paths, edges of a graph, or any other element that uses
            <see cref="T:System.Windows.Media.Pen"/> to draw lines and strokes.
            In these cases setting <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> to <c>false</c> and setting the
            <see cref="!:Shape"/>'s <see cref="!:Shape.Stretch"/> to <see cref="F:System.Windows.Media.Stretch.Fill"/> while
            binding its <see cref="!:Width"/> and <see cref="!:Height"/> to a factor of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/>
            will often provide a better effect.
            </para>
            <para>
            Another reason to set this property to <c>false</c> is when elements change their
            representation or visual state based on the scale (also known as "semantic zoom").
            For example, imagine a canvas showing multiple thumbnails of spreadsheets and the
            relationships between their formulas and values.
            When <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> is set to <c>1.0</c> (the default value), each spreadsheet element
            might be fully interactive, editable, and showing all rows and columns.
            When zooming out, and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> gets small enough that there is not enough room
            for each spreadsheet to show all of its rows and columns, it may change its representation
            into a bar chart or pie chart with axis values and a legend instead.
            When zooming even further out, and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> gets small enough that there is not
            enough room for the axis and legend, it may simply remove the axis and legend to make more
            room for the graphical portion of the chart.
            Since the children of the canvas can be arbitary rich UIElements, they can dynamically
            change their representation and be interacted with at all levels of zoom.
            This is in sharp contrast to multi-scale-image approaches such as Silverlight's Deep Zoom
            since those scenarios are simply performing linear scale transformations on pre-computed static bitmaps.
            </para>
            </remarks>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewboxProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.CoerceActualViewbox(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being
            displayed.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Windows.Rect"/> representing the area of the canvas (in canvas coordinates)
            that is being displayed by this panel.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnActualViewboxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/> dependency
            property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox">
            <summary>
            Gets a <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being
            displayed by this panel.
            </summary>
            <value>A <see cref="T:System.Windows.Rect"/> representing the area of the canvas that is currently being
            displayed by this panel.</value>
            <remarks>
            The value of this property is automatically computed based on the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/>,
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/>, and <see cref="!:RenderSize"/> of this panel.
            It is independent (and usually different) from the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> dependency
            property.
            </remarks>
            <seealso cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ViewboxProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsViewboxValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> dependency
            property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnViewboxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> dependency
            property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox">
            <summary>
            Gets or sets the portion of the canvas (in canvas coordinates) that should be attempted to
            be displayed by this panel.
            </summary>
            <value>A <see cref="T:System.Windows.Rect"/> specifying the portion of the canvas that should be displayed by
            this panel, or <see cref="P:System.Windows.Rect.Empty"/> when unspecified.  The default value is
            <see cref="P:System.Windows.Rect.Empty"/>.</value>
            <remarks>
            The area of the canvas shown by this panel can be controlled by either setting
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/>, or by setting the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>,
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/>, and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> properties.
            When <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> is set to anything other than <see cref="P:System.Windows.Rect.Empty"/>,
            the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> will be automatically coerced to
            appropriate values according to the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> and
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> properties.
            Note that the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> mode of <see cref="F:System.Windows.Media.Stretch.Fill"/> is not supported,
            so unless the aspect ratio of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> exactly matches the aspect ratio of
            <see cref="!:RenderSize"/> the actual area displayed will be more or less than <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>.
            The exact area that is displayed can be determined by the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/>
            property in this case.
            </remarks>
            <seealso cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/>
            <seealso cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/>
            <seealso cref="P:System.Windows.Media.TileBrush.Viewbox"/>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsStretchValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> dependency
            property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnStretchChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> dependency
            property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch">
            <summary>
            Gets or sets a value that specifies how the content of the canvas is displayed when
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> is set.
            </summary>
            <value>One of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> values other than <see cref="F:System.Windows.Media.Stretch.Fill"/>.
            The default is <see cref="F:System.Windows.Media.Stretch.Uniform"/>.</value>
            <remarks>
            Please see the documentation of <see cref="P:System.Windows.Media.TileBrush.Stretch"/> for a detailed explanation
            of the effects of this property.
            The <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> mode of <see cref="F:System.Windows.Media.Stretch.Fill"/> is not supported, so unless
            the aspect ratio of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> exactly matches the aspect ratio of
            <see cref="!:RenderSize"/> the actual area displayed will be more or less than
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>.
            The exact area that is displayed can be determined by the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/>
            property in this case.
            </remarks>
            <seealso cref="P:System.Windows.Media.TileBrush.Stretch"/>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirectionProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsStretchDirectionValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnStretchDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/>
            dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection">
            <summary>
            Gets or sets how setting the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> property can affect the
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/>.
            </summary>
            <value>One of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> values.  The default is
            <see cref="F:System.Windows.Controls.StretchDirection.Both"/></value>
            <remarks>
            When setting the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> property, the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/>
            and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> properties are automatically coerced to the appropriate
            values according to the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/> and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/>
            properties, and any existing values of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> will
            be overridden.
            However, when the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> is set to anything other than
            <see cref="F:System.Windows.Controls.StretchDirection.Both"/>, then the setting of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> property
            can limit the range of the automatically computed value.
            The exact area that is displayed can be determined by the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/>
            property in this case.
            </remarks>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OffsetProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsOffsetValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> dependency
            property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.CoerceOffset(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Windows.Point"/> representing top-left point of the canvas
            (in canvas coordinates) that is currently being displayed after taking 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> into account.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Windows.Point"/> representing top-left point of the canvas
            (in canvas coordinates) that is currently being displayed.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> dependency property 
            has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset">
            <summary>
            Gets or sets (but see remarks) the top-left point of the area of the canvas (in canvas 
            coordinates) that is being displayed by this panel.
            </summary>
            <value>A <see cref="T:System.Windows.Point"/> on the canvas (in canvas coordinates).  The default is 
            <c>(0,0)</c>.</value>
            <remarks>
            This value controls the horizontal and vertical position of the canvas children relative to 
            this panel.
            <para>
            For example, consider a child element which has its <see cref="!:Canvas.Left"/> and 
            <see cref="!:Canvas.Top"/> set to <c>100</c> and <c>100</c>.
            Also assume that the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> is set to <c>1.0</c> (the default value).
            </para>
            <para>
            By default, the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is <c>(0,0)</c> so the element will be 
            displayed at 100 units to the right and 100 units down from the top-left corner of this 
            panel, exactly how <see cref="T:System.Windows.Controls.Canvas"/> would display it.
            If the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is set to <c>(20,40)</c> then the element will be 
            displayed 80 units to the right and 60 units down from the top-left corner of this panel.
            In other words, it will have appeared to "move" up by 20 units and left by 40 units.
            </para>
            <para>
            If the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is set to <c>(100,100)</c> then the top-left corner of 
            the element will be displayed exactly in the top-left corner of this panel.
            Note that this is true regardless of the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/>!
            </para>
            <para>
            If the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is set to <c>(110,120)</c> then the top-left corner of 
            the element will be displayed 10 units to the left and 20 units above this panel.
            In other words, if <see cref="!:ClipToBounds"/> is set to <c>true</c>, then the top-left 
            corner of the element will not be visible.
            </para>
            <para>
            The value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> can also be negative, so if the value of 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is set to <c>(-100,-100)</c> then the element will be displayed at 200 
            pixels to the right and 200 pixels down from the top-left corner of the panel.
            </para>
            <para>
            When the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> property is set to a non-<see cref="P:System.Windows.Rect.Empty"/> value, the 
            value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> property will be automatically computed to match the 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>, <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/>, and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> properties.
            The value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> property will contain the computed value (via the WPF 
            dependency property coersion mechanism), and any attempts to set <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> to a 
            different value will be ignored until <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> is set to 
            <see cref="P:System.Windows.Rect.Empty"/> again.
            </para>
            </remarks>
            <seealso cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ScaleProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsScaleValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> dependency 
            property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.CoerceScale(System.Windows.DependencyObject,System.Object)">
            <summary>
            Returns a <see cref="T:System.Double"/> representing the scale of the content that is currently being 
            displayed after taking <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>, <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/>, and 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> into account.
            </summary>
            <param name="d">Dependency object whos value is being coerced.</param>
            <param name="value">The original uncoerced value.</param>
            <returns>A <see cref="T:System.Double"/> representing scale of the content that is currently being 
            displayed.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnScaleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> dependency property 
            has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale">
            <summary>
            Gets or sets (but see remarks) the scale at which the content of the canvas is being 
            displayed.
            </summary>
            <value>A <see cref="T:System.Double"/> between <see cref="F:System.Double.Epsilon"/> and 
            <see cref="F:System.Double.MaxValue"/>.  The default value is <c>1.0</c>.</value>
            <remarks>
            This value is what controls the zoom level of the canvas and the amount of the 
            <see cref="T:System.Windows.Media.ScaleTransform"/> when <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            When <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>false</c>, this value still controls the 
            positioning of the children (i.e. elements are placed closer together when zoomed out and 
            farther apart when zoomed in), but the sizes of the children are unaffected.
            <para>
            For example, consider a child element which has its <see cref="!:Canvas.Left"/> and 
            <see cref="!:Canvas.Top"/> set to <c>100</c> and <c>100</c>, with a <see cref="!:Width"/> of 50 
            and a <see cref="!:Height"/> of 50.
            Also assume that the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> is set to <c>(0,0)</c> 
            (the default value).
            </para>
            <para>
            By default, the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> is <c>1.0</c> so the element will be displayed 
            at 100 units to the right and 100 units down from the top-left corner of this panel, exactly 
            how <see cref="T:System.Windows.Controls.Canvas"/> would display it.
            If the value of <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> is set to <c>0.8</c> then the top-left corner of the 
            element will be displayed 80 units to the right and 80 units down from the top-left corner 
            of this panel.
            If <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c> (the default value), then the element 
            will also be scaled down (shrunk) to 80% of its normal size, so that the bottom-right of 
            the element will be 120 units to the right and 120 units down from the top-left corner of 
            this panel.
            If <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>false</c>, then the element will remain its 
            original size, resulting in the bottom-right of the element being 130 units to the right 
            and 130 units down from the top-left corner of this panel.
            In other words, it will simply have appeared to "move" up by 20 units and left by 20 units 
            without changing its size.
            This is not normally what a user would expect when "zooming out" (unless the element is 
            some kind of floating label above the canvas), so it is expected that the children of the 
            canvas will be responsible for changing their representation appropriately when 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>false</c>.
            </para>
            <para>
            When the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> property is set to a non-<see cref="P:System.Windows.Rect.Empty"/> value, the 
            value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> property will be automatically computed to match the 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>, <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Stretch"/>, and <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> properties.
            The value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> property will contain the computed value (via the WPF 
            dependency property coersion mechanism), but and any attempts to set <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> to 
            a different value will be ignored (if <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.StretchDirection"/> is set to 
            <see cref="F:System.Windows.Controls.StretchDirection.Both"/>) until <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/> is set to 
            <see cref="P:System.Windows.Rect.Empty"/> again.
            </para>
            </remarks>
            <seealso cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Viewbox"/>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimitProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimit"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsRealizationLimitValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimit"/> 
            dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnRealizationLimitChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimit"/> 
            dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency 
            property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimit">
            <summary>
            Gets or sets the maximum number of elements that will be instantiated on the canvas when 
            <see cref="!:IsVirtualizing"/> is set to true/>.
            </summary>
            <value>An <see cref="T:System.Int32"/> between <c>0</c> and <see cref="F:System.Int32.MaxValue"/>.  
            The default is <see cref="F:System.Int32.MaxValue"/>.</value>
            <remarks>
            When the children of the canvas are being populated through an <see cref="T:System.Windows.Controls.ItemsControl"/>, 
            visual elements will be instantiated for the first <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationLimit"/> 
            items within the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/>.
            </remarks>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRateProperty">
            <summary>
            Identifies the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate"/> dependency property.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.IsRealizationRateValid(System.Object)">
            <summary>
            Determines whether the value given is a valid value for the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate"/>
            dependency property.
            </summary>
            <param name="value">The potential value for the dependency property.</param>
            <returns><c>true</c> if the value is a valid value for the property; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnRealizationRateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the event that occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate"/> 
            dependency property has changed.
            </summary>
            <param name="d">The dependency object on which the dependency property has changed.</param>
            <param name="e">The event args containing the old and new values of the dependency property.
            </param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate">
            <summary>
            Gets or sets the maximum number of elements that will be realized or virtualized at one time 
            before yielding control back to the dispatcher when <see cref="!:IsVirtualizing"/> is set to 
            true/>.
            </summary>
            <value>An <see cref="T:System.Int32"/> between <c>0</c> and <see cref="F:System.Int32.MaxValue"/>.  The 
            default is <see cref="F:System.Int32.MaxValue"/>.</value>
            <remarks>
            By default, the value of this property is <see cref="F:System.Int32.MaxValue"/> which means that all 
            realization and virtualization happens at once, at the time determined by 
            <see cref="!:RealizationPriority"/>.
            The default behavior is optimized to realize all elements as quickly as possible, at the 
            expensive of application responsiveness while the realization is happening.
            Setting the <see cref="!:RealizationPriority"/> to <see cref="!:DispatcherPriority.Input"/> 
            and decreasing the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate"/> will make the application feel more 
            responsive but will take longer to realize all items.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.#cctor">
            <summary>
            Performs a one-time initialization of <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/>-related metadata.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.#ctor">
            <summary>
            Ensures coersion routines are invoked with their default values.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex">
            <summary>
            Private implementation of <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource"/> when the items source is 
            not one.
            </summary>
            <remarks>
            This class efficiently implements a spatial index by internally using a PriorityQuadTree 
            data structure.
            </remarks>
        </member>
        <member name="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.SpatialItem">
            <summary>
            Private class that holds an index/bounds pair.
            </summary>
            <remarks>
            A Tuple could have been used instead except that we want Index to be mutable.
            </remarks>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex._tree">
            <summary>
            We use a PriorityQuadTree to implement our spatial index.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex._items">
            <summary>
            This is a list of all of the spatial items in the index.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex._extent">
            <summary>
            Holds the accurate extent of all item bounds in the index.  This may be different 
            from _tree.Extent.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex._lastQuery">
            <summary>
            Holds the last query used in order to know when to raise the 
            <see cref="E:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.QueryInvalidated"/> event.
            </summary>
        </member>
        <member name="E:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.ExtentChanged">
            <summary>
            Occurs when the value of the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Extent"/> property has changed.
            </summary>
        </member>
        <member name="E:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.QueryInvalidated">
            <summary>
            Occurs when the results of the last query are no longer valid and should be re-queried.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Query(System.Windows.Rect)">
            <summary>
            Get a list of the items that intersect the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>
            List of zero or more items that intersect the given bounds, returned in the order given 
            by the priority assigned during Insert.
            </returns>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Extent">
            <summary>
            Gets the computed minimum required rectangle to contain all of the items in the index.  
            This property is also settable for efficiency the future extent of the items is known.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Item(System.Int32)">
            <summary>
            Gets or sets the bounds for the item with the given <paramref name="index"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The bounds of the item, or <see cref="P:System.Windows.Rect.Empty"/> if the bounds are unknown.
            </returns>
            <remarks>
            Items with bounnds of <see cref="P:System.Windows.Rect.Empty"/> are always returned first from any query.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.InsertRange(System.Int32,System.Int32)">
            <summary>
            Adds or inserts the given <see cref="!:count"/> of items at the given <see cref="!:index"/>.
            </summary>
            <param name="index">The index at which to insert the items.</param>
            <param name="count">The number of items to insert.</param>
            <remarks>
            All items are inserted with bounds of <see cref="P:System.Windows.Rect.Empty"/>, meaning they will be 
            returned from all queries.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the given <see cref="!:count"/> of items at the given <see cref="!:index"/>.
            </summary>
            <param name="index">The index at which to remove from.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Reset(System.Int32)">
            <summary>
            Clears and resets the spatial index to hold the given <see cref="!:count"/> of items.
            </summary>
            <param name="count">The number of items within the index.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateSpatialIndex.Optimize">
            <summary>
            Optimizes the spatial index based on the current extent if optimization is warranted.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.SpatialIndex">
            <summary>
            Two-dimentional spatial index of our data items.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.PrivateIndex">
            <summary>
            Private implementation of <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ISpatialItemsSource"/> when the items source does not 
            provide one.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizedItems">
            <summary>
            Ordered list of realized items based on the order they are returned from the spatial index.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnIsVirtualizingChanged(System.Boolean,System.Boolean)">
            <summary>
            Handles the event that occurs when the value of the 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.VirtualPanel.IsVirtualizing"/> property has changed.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnIsItemsHostChanged(System.Boolean,System.Boolean)">
            <summary>
            Refreshes our data when the <see cref="P:System.Windows.Controls.Panel.IsItemsHost"/> property has changed.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Dispatches to specific methods to update the spatial index when the items have changed.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnItemsAdded(System.Int32,System.Collections.IList)">
            <summary>
            Updates our private spatial index when items are added to the item source.
            </summary>
            <param name="index">The index of the first item that was added.</param>
            <param name="items">The items that were added.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnItemsRemoved(System.Int32,System.Collections.IList)">
            <summary>
            Updates our private spatial index when items are removed from the item source.
            </summary>
            <param name="index">The old index of the first item that was removed.</param>
            <param name="items">The items that were removed.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnItemsReset">
            <summary>
            Resets and initializes our spatial indices when the items source has changed.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnSpatialQueryInvalidated(System.Object,System.EventArgs)">
            <summary>
            Invalidates reality when the last spatial query is no longer valid.
            </summary>
            <param name="sender">The spatial index.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnSpatialExtentChanged(System.Object,System.EventArgs)">
            <summary>
            Invalidates the extent when the spatial index extent has changed.
            </summary>
            <param name="sender">The spatial index.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizeOverride(System.Collections.IEnumerable,System.Object)">
            <summary>
            Performs realization and virtualization in batches based on the 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizationRate"/>. 
            </summary>
            <param name="items">The current items being hosted by this panel.</param>
            <param name="state">The previous return value of this method.</param>
            <returns>A non-<c>null</c> value if further realization is required; otherwise, 
            <c>null</c>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.RealizeOverride">
            <summary>
            Realizes and virtualizes items based on the current viewbox.
            </summary>
            <returns>An enumerator which allows this method to continue realization where it left off.
            </returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Updates the calculated <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ActualViewbox"/> and the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Scale"/> and 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Offset"/> when the size changes.
            </summary>
            <param name="sizeInfo">Size information about the render size.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OnPositioningChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invalidates the arrangement of canvases when their children's positions change.
            </summary>
            <param name="d">Dependency object whos position has changed.</param>
            <param name="e">Event arguments related to the change.</param>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.AppliedScaleTransform">
            <summary>
            Gets the applied scale transform if <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.AppliedTranslateTransform">
            <summary>
            Gets the applied translate transform if <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ScaleOverride(System.Double)">
            <summary>
            Scales the child elements of a <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> by applying a transform if 
            <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, or by calling 
            <see cref="!:FrameworkElement.InvalidateArrange"/> otherwise.
            </summary>
            <param name="scale">The new scale of the canvas.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.OffsetOverride(System.Windows.Point)">
            <summary>
            Offsets the child elements of a <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> by applying a transform if
             <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ApplyTransform"/> is <c>true</c>, or by calling 
            FrameworkElement.InvalidateArrange/> otherwise.
            </summary>
            <param name="offset">The new offset of the canvas.</param>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> in anticipation of arranging 
            them during the <see cref="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <param name="availableSize">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.
            </param>
            <returns>A <see cref="T:System.Windows.Size"/> that represents the size that is required to arrange child 
            content.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> element.
            </summary>
            <param name="finalSize">The size that this <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> element should use 
            to arrange its child elements.</param>
            <returns>A <see cref="T:System.Windows.Size"/> that represents the arranged size of this 
            <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/> element and its descendants.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.GetLayoutClip(System.Windows.Size)">
            <summary>
            Returns a clipping geometry that indicates the area that will be clipped if the 
            <see cref="P:System.Windows.UIElement.ClipToBounds"/> property is set to <c>true</c>. 
            </summary>
            <param name="layoutSlotSize">The available size of the element.</param>
            <returns>A <see cref="T:System.Windows.Media.Geometry"/> that represents the area that is clipped if 
            <see cref="P:System.Windows.UIElement.ClipToBounds"/> is <c>true</c>.</returns>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ChildrenExtent">
            <summary>
            Represents the extent of the instantiated UIElements calculated during 
            <see cref="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ArrangeOverride(System.Windows.Size)"/>.
            </summary>
        </member>
        <member name="F:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.ComputedExtent">
            <summary>
            Caches the calculated <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Extent"/> based on the spatial index and arranged 
            children of the canvas until <see cref="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.InvalidateExtent"/> is called.
            </summary>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Extent">
            <summary>
            Gets the extent of the populated area of the canvas (in canvas coordinates).
            </summary>
            <remarks>
            This property is also used to determine the range of the scroll bars when the canvas is 
            hosted within a <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            </remarks>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.InvalidateExtent">
            <summary>
            Re-computes the <see cref="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.Extent"/> of items in the canvas and updates the parent scroll 
            viewer if there is one.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.GetVisualPoint(System.Windows.Point)">
            <summary>
            Gets the current visual coordinates for a given <see cref="T:System.Windows.Point"/> on this 
            <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/>.
            </summary>
            <param name="canvasPoint">The <see cref="T:System.Windows.Point"/> in canvas coordinates.</param>
            <returns>The current position of the canvas point on the screen relative to the upper-left 
            corner of this <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/>.</returns>
        </member>
        <member name="M:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.GetCanvasPoint(System.Windows.Point)">
            <summary>
            Gets the point on the canvas that is currently represented by the given <see cref="T:System.Windows.Point"/> 
            on the screen.
            </summary>
            <param name="screenPoint">The <see cref="T:System.Windows.Point"/> on the screen relative to the upper-left 
            corner of this <see cref="T:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas"/>.</param>
            <returns>The point on the canvas that corresponds to the given point on the screen.
            </returns>
        </member>
        <member name="P:Dependinator.Utils.UI.VirtualCanvas.ZoomableCanvas.MousePosition">
            <summary>
            Returns the the point on the canvas at which the mouse cursor is currently located.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.WpfBindingTraceListener">
            <summary>
            Support warning logging of WPF binding errors
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.HideableGridSplitter">
            <summary>
            Grid splitter, which can toggle visibility of grid row after a the grid splitter
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.PropertyToVisibilityConverter">
            <summary>
            Convert between boolean and visibility
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.PropertyToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary> 
            Convert bool or Nullable&lt;bool&gt; to Visibility
            </summary> 
        </member>
        <member name="M:Dependinator.Utils.UI.PropertyToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Visibility to boolean 
            </summary>
        </member>
        <member name="T:Dependinator.Utils.UI.PropertyToVisibilityInvertConverter">
            <summary>
            Convert between boolean and visibility
            </summary>
        </member>
        <member name="M:Dependinator.Utils.UI.PropertyToVisibilityInvertConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary> 
            Convert bool or Nullable&lt;bool&gt; to Visibility
            </summary> 
        </member>
        <member name="M:Dependinator.Utils.UI.PropertyToVisibilityInvertConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Visibility to boolean 
            </summary>
        </member>
        <member name="T:Dependinator.Utils.NamespaceDoc">
            <summary>
            Contains the utility functionality usable in most programs.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.With`1">
            <summary>
            A helper struct, to make it easier to implement With functions in immutable classes.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.Equatable`1">
            <summary>
            Base class, which implement IEquatable'T' interface and makes it easier to prt
            equality operators like "==" and "!=" and usage in Dictionary.
            Just inherit from this class and call "IsEqual()" in the constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Dependinator.Utils.Equatable">
            <summary>
            Helper class to implement IEquatable'T'  interface
            </summary>
        </member>
        <member name="T:Dependinator.Utils.IpcService">
            <summary>
            The IPC Remoting service base class. 
            On the server side, instances of classes, which inherits this class will receive IPC calls.
            On client side, proxy instances, based on that type, are used to make IPC calls.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.SingleInstanceAttribute">
            <summary>
            Attribute used to mark types that should be registered as a single instance in
            dependency injection.
            </summary>
        </member>
        <member name="T:Dependinator.Utils.AsyncSemaphore">
            <summary>
            An asynchronous semaphore. Can be used for throttling or handling concurrent access to a
            limited number of resources.
            </summary>
            <remarks>
            This class is inspired by http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266983.aspx
            </remarks>
        </member>
        <member name="T:Dependinator.Utils.MicroDiContainer">
            <summary>
            MicroDIContainer is a simple dependency injection container similar to e.g. AutoFac.
            This can be used to remove dependency on an external DI container 
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.Resolve``1">
            <summary>
            Resolves the specified type.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.RegisterTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers the types.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.GetInstanceProvider(System.Type)">
            <summary>
            Gets the instance provider for the type.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.Register(System.Type,System.Func{System.Object})">
            <summary>
            Registers the specified type and an instance provider for the type.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.ResolveInstance(System.Type)">
            <summary>
            Resolves an instance for the specified type.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.DynamicCastToTypedList(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Dynamically casts a IEnumerable'object' to a typed IEnumerable'T'.
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.ToTypedList``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            This function is used by DynamicCastToTypedList using reflection
            Cast a untyped list to a typed list. 
            </summary>
        </member>
        <member name="M:Dependinator.Utils.MicroDiContainer.ToTypedLazy``1(System.Func{System.Object})">
            <summary>
            This function is used by DynamicCastToLazy using reflection
            Creates a Lazy'T'
            </summary>
        </member>
        <member name="T:Dependinator.NamespaceDoc">
            <summary>
            Root namespace with the Program Main() entry point.
            </summary>
        </member>
        <member name="T:Dependinator.Program">
            <summary>
            Contains the Main method and is the entry point of the program.
            </summary>
        </member>
        <member name="T:Dependinator.App">
            <summary>
            Interaction logic for App.xaml.
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:Dependinator.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Dependinator.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dependinator.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dependinator.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:System.DoubleExtensions">
            <summary>
            'double' type convieniense extensions.
            </summary>
        </member>
        <member name="T:System.NamespaceDoc">
            <summary>
            Extends the .Net 'System' namespace.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
             Returns distinct elements from a sequence by using a specified 
             predicate to compare values of two elements.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:System.Linq.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurrence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:System.ExceptionAsyncExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Exception"/>.
            Based on: https://github.com/aelij/AsyncFriendlyStackTrace
            </summary>
        </member>
        <member name="M:System.ExceptionAsyncExtensions.ToAsyncString(System.Exception)">
            <summary>
            Gets an async-friendly <see cref="T:System.Exception"/> string using <see cref="M:System.Diagnostics.StackTraceExtensions.ToAsyncString(System.Diagnostics.StackTrace)"/>.
            Includes special handling for <see cref="T:System.AggregateException"/>s.
            </summary>
            <param name="exception">The exception to format.</param>
            <returns>An async-friendly string representation of an <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.ExceptionAsyncExtensions.PrepareForAsyncSerialization(System.Exception)">
            <summary>
            Prepares an <see cref="T:System.Exception"/> for serialization by including the async-friendly
            stack trace as additional <see cref="P:System.Exception.Data"/>.
            Note that both the original and the new stack traces will be serialized.
            This method operates recursively on all inner exceptions,
            including ones in an <see cref="T:System.AggregateException"/>.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:System.ExceptionAsyncExtensions.GenerateGetField``2(System.String)">
            <summary>
            Allows accessing private fields efficiently.
            </summary>
            <typeparam name="TOwner">Type of the field's owner.</typeparam>
            <typeparam name="TField">Type of the field.</typeparam>
            <param name="fieldName">The field name.</param>
            <returns>A delegate field accessor.</returns>
        </member>
        <member name="T:System.Diagnostics.StackTraceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Diagnostics.StackTrace"/>.
            Based on: https://github.com/aelij/AsyncFriendlyStackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceExtensions.ToAsyncString(System.Diagnostics.StackTrace)">
            <summary>
            Produces an async-friendly readable representation of the stack trace.
            </summary>
            <remarks>
            The async-friendly formatting is archieved by:
            * Skipping all awaiter frames (all methods in types implementing <see cref="T:System.Runtime.CompilerServices.IAsyncStateMachine"/>).
            * Inferring the original method name from the async state machine class (<see cref="T:System.Runtime.CompilerServices.IAsyncStateMachine"/>)
              and removing the "MoveNext" - currently only for C#.
            * Adding the "async" prefix after "at" on each line for async invocations.
            * Appending "(?)" to the method signature to indicate that parameter information is missing.
            * Removing the "End of stack trace from previous location..." text.
            </remarks>
            <param name="stackTrace">The stack trace.</param>
            <returns>An async-friendly readable representation of the stack trace.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WithCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Provides a workaround for async functions that have no built-in cancellation support.
            This functions should only be used as a last resort. It does not cancel the original, call
            it only provides cancellation support for the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.WithCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Provides a workaround for async functions that have no built-in cancellation support.
            This functions should only be used as a last resort. It does not cancel the original, call
            it only provides cancellation support for the caller.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
