@inject IApplicationEvents applicationEvents
@inject IDependenciesService2 srv
@inject IScreenService screenService

<MudPopover Open="IsShowExplorer" Fixed="true" Class="px-4 pt-4 ml-1" AnchorOrigin="Origin.BottomLeft"
    TransformOrigin="Origin.BottomLeft" MaxHeight="MaxHeight">

    <MudStack>
        <MudStack Row="true" Class="my-n2">
            <MudText>@(srv.TreeData(TreeSide.Left)?.Title)</MudText>
            <MudIcon Icon="@Icons.Material.Outlined.ArrowRightAlt" Size="Size.Medium" Class="mx-n3" />
        </MudStack>
        <MudDivider />
        <MudPaper Class="overflow-y-auto" Elevation="0" MaxWidth="MaxWidth" MaxHeight="500px">
            <DependenciesTree Side="TreeSide.Left" />
        </MudPaper>
    </MudStack>
</MudPopover>



@code {
    bool IsShowExplorer => srv.IsShowExplorer;

    int MaxHeight => (int)screenService.SvgRect.Height - 5;
    int MaxWidth => (int)screenService.SvgRect.Width - 20;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}