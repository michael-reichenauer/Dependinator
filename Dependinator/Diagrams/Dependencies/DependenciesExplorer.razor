@inject IApplicationEvents applicationEvents
@inject IDependenciesService srv
@inject IScreenService screenService

<MudPopover Open="@srv.IsShowExplorer" Fixed="true" Class="px-4 pt-4 ml-1" AnchorOrigin="Origin.BottomLeft"
    TransformOrigin="Origin.BottomLeft" MaxHeight="MaxHeight">

    <MudStack>

        <MudStack Row="true">

            <MudIcon Icon="@srv.Icon" Class="my-n2" />
            <MudGrid Spacing="1" Justify="Justify.Center" Class="my-n2">
                <MudItem xs="5">
                    <MudText Class="align-content-end">@(srv.TreeData(TreeSide.Left)?.Title)
                    </MudText>
                </MudItem>
                <MudItem xs="2" Class="mx-n5">
                    <MudIconButton Icon="@Icons.Material.Outlined.ArrowRightAlt" Size="Size.Large" Class="my-n5"
                        OnClick="srv.SwitchSides" />
                </MudItem>
                <MudItem xs="5">
                    <MudText>@(srv.TreeData(TreeSide.Right)?.Title)</MudText>
                </MudItem>
            </MudGrid>

            <MudIconButton Icon="@Icons.Material.Outlined.Close" Size="Size.Small" Class="my-n2"
                OnClick="srv.HideExplorer" />

        </MudStack>

        <MudDivider />
        <MudPaper Class="overflow-y-auto" Elevation="0" MaxWidth="MaxWidth">
            <MudGrid pacing="1" Justify="Justify.Center">
                <MudItem xs="@Columns">
                    <div Class="overflow-y-auto" MaxHeight="500px">
                        <DependenciesTree Side="TreeSide.Left" />
                    </div>
                </MudItem>

                @if (Columns == 12)
                {
                    <MudDivider />
                }

                <MudItem xs="@Columns">
                    <div Class="overflow-y-auto" MaxHeight="500px">
                        <DependenciesTree Side="TreeSide.Right" />
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudStack>
</MudPopover>



@code {
    int MaxHeight => (int)screenService.SvgRect.Height - 5;
    int MaxWidth => (int)screenService.SvgRect.Width - 20;

    int Columns => screenService.SvgRect.Width > 600 ? 6 : 12;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}