@inject IApplicationEvents applicationEvents
@inject IDependenciesService srv
@inject IScreenService screenService
@inject IInteractionService interactionService
@inject ISelectionService selectionService

<style>
    .hover-button {
        visibility: hidden;
    }

    .hover-element:hover .hover-button {
        visibility: visible;
    }
</style>

<MudPopover Open="IsShowExplorer" Fixed="true" Class="px-4 pt-4 ml-1" MaxHeight="MaxHeight"
    AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopLeft">
    <MudStack>
        <MudStack Row="true">
            <MudIcon Icon="@srv.TreeIcon" Class="ml-n5" />
            <MudText Color="Color.Info"><b>@(srv.Title)</b></MudText>
        </MudStack>
        <MudPaper Class="overflow-y-auto ml-n8" Elevation="0" MaxWidth="MaxWidth" MaxHeight="500px">
            <MudTreeView Items="@srv.TreeItems" Hover="true" Dense="true" Width="100%">
                <ItemTemplate Context="treeItem">
                    @{
                        var item = (TreeItem)treeItem;
                    }
                    <MudTreeViewItem Items="@item.Children" Icon="@item.Icon"
                        OnClick="() => srv.SetSelected(item.Value!)" @bind-Expanded="@item.Expanded">
                        <BodyContent>
                            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%"
                                class="hover-element">

                                <MudText Style="justify-self: start;">@item.Text</MudText>

                                @if (item.NodeId != Models.NodeId.Empty)
                                {
                                    <div style="justify-self: end;">
                                        <MudIconButton Icon="@Icons.Material.Filled.CenterFocusStrong" Size="Size.Small"
                                            Color="Color.Inherit" Class="ml-3 hover-button"
                                            OnClick="() => srv.ShowNode(item.NodeId)" />
                                        <MudIconButton Icon="@Icons.Material.Filled.LinearScale" Size="Size.Small"
                                            Color="Color.Inherit" Class="ml hover-button"
                                            OnClick="() => srv.ShowDirectLine(item.NodeId)" />
                                    </div>
                                }
                            </div>
                        </BodyContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    </MudStack>
</MudPopover>


@code {
    bool IsShowExplorer => srv.IsShowExplorer;

    int MaxHeight => (int)screenService.SvgRect.Height - 5;
    int MaxWidth => (int)screenService.SvgRect.Width - 20;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}
