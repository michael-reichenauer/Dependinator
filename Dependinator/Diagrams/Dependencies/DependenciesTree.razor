@inject IApplicationEvents applicationEvents
@inject IDependenciesService srv


@* <MudTreeView Color="Color.Info" Items="@Tree.TreeItems" @bind-SelectedValue="Tree.Selected" Hover="true" Dense="true"
Width="100%">
<ItemTemplate>
<MudTreeViewItem Value="@context" Icon="@context.Value.Icon" @bind-Expanded="@context.Expanded"
ExpandedIcon="@context.Value!.ExpandIcon" Items="@context.Children">
<BodyContent Context="item">
<div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
@if (context.IsSelected)
{
<MudText Style="justify-self: start;" Color="@context.TextColor">
<b>@context.Text</b>
</MudText>
}
else
{
<MudText Style="justify-self: start;" Color="@context.TextColor">
@context.Text
</MudText>
}
<div style="justify-self: end;">
<MudIconButton Icon="@Icons.Material.Filled.CenterFocusStrong" Size="Size.Small"
Color="Color.Inherit" Class="ml-3" />
</div>
</div>
</BodyContent>
</MudTreeViewItem>
</ItemTemplate>
</MudTreeView> *@

@code {
    [Parameter]
    public TreeSide Side { get; set; }

    Tree Tree => srv.TreeData(Side);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}