@using Dependinator.Diagrams.Icons
@using Dependinator.Diagrams.Dependencies


@inject IApplicationEvents applicationEvents
@inject IInteractionService interactionService
@inject ISelectionService selectionService
@inject IDialogService dialogService
@inject IDependenciesService dependenciesService


<MudButtonGroup Color="Color.Tertiary" Size="Size.Small" Variant="Variant.Filled" Class="@show" Style="@position">
    @if (selectionService.IsSelectedLineDirect)
    {
        <MudIconButton Icon="@MudBlazor.Icons.Material.Filled.Close" OnClick="CloseDirectLine" />
    }
    else
    {
        <MudIconButton Icon="@Icon.ReferencesIcon" OnClick="ShowReferences" />
        <MudIconButton Icon="@Icon.DependenciesIcon" OnClick="ShowDependencies" />
    }
</MudButtonGroup>


@code {
    string show => selectionService.SelectedLinePosition != Models.Pos.None ? "visible" : "hidden";
    bool isIcon => !interactionService.IsContainer;
    double left => selectionService.SelectedLinePosition.X;
    double top => selectionService.SelectedLinePosition.Y - 20;
    string position => $"Position: fixed; left:{left}px; top:{top}px";

    void ShowReferences() => dependenciesService.ShowReferences();
    void ShowDependencies() => dependenciesService.ShowDependencies();
    void CloseDirectLine()
    {
        if (!selectionService.SelectedId.IsLine)
            return;
        var lineId = Models.LineId.FromId(selectionService.SelectedId.Id);
        dependenciesService.HideDirectLine(lineId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}