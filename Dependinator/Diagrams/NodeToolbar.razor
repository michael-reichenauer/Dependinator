@inject IApplicationEvents applicationEvents
@inject IInteractionService interactionService
@inject IDialogService DialogService
@inject IDependenciesService dependenciesService


<MudButtonGroup Color="Color.Tertiary" Size="Size.Small" Variant="Variant.Filled"
    Style="@NodeToolBarPosition">
    <MudMenu Icon="@Icons.Material.Outlined.Menu" Dense="true" AnchorOrigin="Origin.BottomCenter">
        <MudMenuItem IconSize="Size.Medium" IconColor="Color.Secondary" Icon="@Icons.Material.Outlined.TextSnippet"
            OnClick="ShowProperties" OnTouch="ShowProperties">Properties ...</MudMenuItem>
    </MudMenu>
    
    <MudIconButton Icon="@DependenciesService.Dependencies" OnClick="()=> dependenciesService.ShowExplorer(TreeSide.Left)"  />
    <MudIconButton Icon="@DependenciesService.References" OnClick="()=> dependenciesService.ShowExplorer(TreeSide.Right)"  />

    <MudIconButton Icon="@Icons.Material.Outlined.FitScreen" OnClick="interactionService.NodePanZoomToFit" Disabled="@isIcon"/>
    <MudToggleIconButton @bind-Toggled="@interactionService.IsEditNodeMode" Icon="@Icons.Material.Outlined.Edit" Disabled="@isIcon"
        ToggledIcon="@Icons.Material.Filled.Edit" ToggledColor="@Color.Warning" />
</MudButtonGroup>



@code {
    bool isIcon => !interactionService.IsContainer;
    string NodeToolBarPosition => 
        $"Position: fixed; left:{interactionService.SelectedNodePosition.X}px; top:{interactionService.SelectedNodePosition.Y - 55}px";
  
  
    private void ShowProperties()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<NodeProperties>("Node Properties", options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}