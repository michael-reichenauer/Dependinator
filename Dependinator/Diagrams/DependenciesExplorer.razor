@inject IApplicationEvents applicationEvents
@inject IDependenciesService srv

<MudPopover Open="@srv.IsShowExplorer" Fixed="true" Class="px-4 pt-4 ml-1" AnchorOrigin="Origin.BottomLeft"
    TransformOrigin="Origin.BottomLeft">

    <MudStack>
        <MudStack Row="true">
            <MudIcon Icon="@Icons.Material.Outlined.Polyline" Class="my-n2" />
            <MudText Typo="Typo.subtitle2" Class="my-n2 ml-n2">Dependencies Explorer</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.Close" Size="Size.Small" Class="my-n2"
                OnClick="srv.HideExplorer" />
        </MudStack>

        <MudDivider />
        <MudPaper MinWidth="350px" MaxHeight="500px" Class="overflow-y-auto" Elevation="0">
            <MudStack Row="true">
                <MudTreeView Items="@srv.LeftTreeItems" ServerData="srv.LeftLoad" @bind-SelectedValue="srv.LeftSelected"
                    Hover="true" Dense="true" Width="100%">
                    <ItemTemplate>
                        <MudTreeViewItem Value="@context" Icon="@context.Icon" CanExpand="@context.CanExpand"
                            LoadingIconColor="Color.Info">
                            <BodyContent Context="item">
                                <div
                                    style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                    <MudText Style="justify-self: start;">@context.Title</MudText>
                                    <div style="justify-self: end;">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                            Color="Color.Inherit" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                            Color="Color.Inherit" />
                                    </div>
                                </div>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>


                <MudTreeView Items="@srv.RightTreeItems" ServerData="srv.RightLoad"
                    @bind-SelectedValue="srv.RightSelected" Hover="true" Dense="true" Width="100%">
                    <ItemTemplate>
                        <MudTreeViewItem Value="@context" Icon="@context.Icon" CanExpand="@context.CanExpand"
                            LoadingIconColor="Color.Info">
                            <BodyContent Context="item">
                                <div
                                    style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                    <MudText Style="justify-self: start;">@context.Title</MudText>
                                    <div style="justify-self: end;">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                            Color="Color.Inherit" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                            Color="Color.Inherit" />
                                    </div>
                                </div>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>

            </MudStack>
        </MudPaper>
    </MudStack>
</MudPopover>



@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) applicationEvents.UIStateChanged += () => InvokeAsync(StateHasChanged);
    }
}